{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to PyScreeps-Arena","text":"<p>\u00a0\u00a0\u00a0\u00a0\u8fd9\u4e2a\u9879\u76ee\u9002\u7528\u4e8e\u60f3\u7528python\u6e38\u73a9\u300aScreeps:Arena\u300b\u7684\u73a9\u5bb6\u3002 \u8be5\u9879\u76ee\u63d0\u4f9b\u4e00\u4e2a'\u6807\u51c6\u5e93'(std.py)\u6765\u5145\u5f53js\u548cpython\u7684\u7c98\u5408\u5c42\uff0c\u73a9\u5bb6\u5728main.py\u7684loop\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u901a\u8fc7\u8fd0\u884cbuild.py\u6765\u751f\u6210main.mjs\u3002 </p> <p> \u00a0\u00a0\u00a0\u00a0! \u8bf7\u6ce8\u610f\uff0cArena\u548cWorld\u7684\u4ee3\u7801\u662f\u4e0d\u901a\u7528\u7684\u3002 <p> <p>\u00a0\u00a0\u00a0\u00a0(\u5982\u679c\u4f60\u8981\u6e38\u73a9\u300aScreeps:World\u300b, \u90a3\u4e48\u63a8\u8350\u4f60\u53bb\u4f7f\u7528github\u9879\u76ee:'screeps-starter-python') </p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>1.\u514b\u9686\u8fd9\u4e2agithub\u9879\u76ee\u5230\u672c\u5730</li> <li>2.\u51c6\u5907\u597dpython3.10\u53ca\u4ee5\u4e0a\u7248\u672c, \u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884ccmd\u547d\u4ee4:</li> </ul> <p> <code>pip install requirement.txt</code></p> <ul> <li>3.\u4f7f\u7528pycharm\u8fd9\u6837\u7684\u5de5\u5177\u6253\u5f00\u9879\u76ee\u76ee\u5f55</li> <li>4.\u4fee\u6539main.py\u4e2d\u7684\u903b\u8f91(\u53ef\u4ee5\u81ea\u5df1\u5728src\u4e2d\u81ea\u5df1\u7f16\u5199\u6a21\u5757\u5e76\u5bfc\u5165)</li> <li>5.\u8fd0\u884cbuild.py\u6765\u521b\u5efamain.mjs</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"Text Only<pre><code>src/\n    std.py\n    main.py\n    config.py\n</code></pre>"},{"location":"src/config/","title":"Config","text":"Python<pre><code># ! This Module won't be compiled into the final js code. ! #\n# ! Only for defines and IDE identification. ! #\n\n# define jprint console.log\n\n# // Assert Level  // Suggest use FULL if you meet strange unexpected logic. \u6709\u52a9\u4e8e\u53d1\u73b0\u903b\u8f91\u9519\u8bef\u3002\u5fc5\u8981\u68c0\u67e5\u53ef\u4ee5\u907f\u514djs\u8fd0\u884c\u9519\u8bef\n# define ASSERT_FULL 2\n# define ASSERT_ESSENTIAL 1\n# define ASSERT_DISABLE 0\n# define ASSERT_LEVEL ASSERT_DISABLE\n\n# // DLC Module Select // \u6839\u636e\u9700\u8981\u81ea\u9009. \u9009\u9519\u4f1a\u5728\u8fdb\u6e38\u620f\u5bf9\u5c40\u524d\u62a5\u9519\n# define USE_TUTORIAL_FLAG 0\n# define USE_ARENA_FLAG 0\n# define USE_SCORE_COLLECTOR 0\n\n# // Project Config\n# define MAIN_JS_PATH C:/Users/22290/ScreepsArena/tutorial-final_test/main.mjs\n\n# ------------------------------------------------- IDE Identification ---------------------------------------------------\nsize = 0\narray = []\nundefined = None\nInfinity = float('inf')\nresult = Math = object()\nString = lambda _: _\njprint = lambda *_: _\n</code></pre>"},{"location":"src/main/","title":"Main","text":"Python<pre><code>from game.const import *\nfrom game.proto import *\nfrom game.utils import *\nfrom config import *\nfrom std import *\n\n# ----------------------------------\n# __pragma__('noalias', 'undefined')\n# __pragma__('noalias', 'Infinity')\n# __pragma__('noalias', 'clear')\n# __pragma__('noalias', 'get')\n\n\ndef loop():\n    # your code here\n    std.show_usage()\n</code></pre>"},{"location":"src/std/","title":"Std","text":""},{"location":"src/std/#src.std.Stage","title":"<code>Stage</code>","text":"<p>\u6709\u9650\u72b6\u6001\u673a</p> <p>.current: str \u5f53\u524d\u72b6\u6001</p> <p>.next(): str \u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001</p> <p>Parameters:</p> Name Type Description Default <code>sdef</code> <code>list</code> <p>\u4e00\u4e2alist\u5bf9\u8c61, \u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u8f6c\u79fb\u5b9a\u4e49: [src: str | tuple, dst: str | tuple, condition: callable -&gt; bool, action: callable]</p> <ul> <li> <p>\u6bcf\u4e2acallable\u5f62\u5982 callable(stage:Stage, trans-local:object). stage\u8868\u793a\u6240\u6709\u5f53\u524d\u7684Stage\u5b9e\u4f8b; trans-local\u8868\u793a\u5f53\u524d\u8f6c\u79fb\u5185\u90e8\u7684\u5c40\u90e8\u7a7a\u95f4</p> </li> <li> <p>\u5982\u679c\u662f\u56fa\u5b9a\u8df3\u8f6c\uff0c\u90a3\u4e48\u53ef\u4ee5\u53ea\u4f20\u5165action\u3002\u5373: [src: str | tuple, dst: str | tuple, action: callable]</p> </li> </ul> <p>!!! \u6ce8\u610f: sdef\u4e0d\u80fd\u662f\u7a7a\u5217\u8868</p> <ul> <li> <p>\u7279\u522b\u7684\uff0csrc\u53ef\u4ee5\u662f \uff0a\u3002\u5f53\u67d0\u4e2asrc\u6ca1\u6709\u4efb\u4f55\u53ef\u884c\u8df3\u8f6c\u65f6\uff0c\u4f1a\u5c1d\u8bd5\u4f7f\u7528 \uff0a -&gt; \u7684\u8df3\u8f6c\u5224\u65ad\u3002</p> </li> <li> <p>\u7279\u522b\u7684\uff0csrc\u548cdst\u53ef\u4ee5\u662ftuple\u3002\u8fd9\u901a\u5e38\u8868\u793a\u4e8c\u8005\u7684condition\u548caction\u662f\u4e00\u6837\u7684\u3002</p> </li> </ul> <p>\u4f8b\u5982: [('a', 'b'), 'c', ...]\u5c06\u88ab\u89e3\u6790\u4e3a ['a', 'b', ...], ['b', 'c', ...]</p> required <code>entry</code> <code>str</code> <p>\u521d\u59cb\u72b6\u6001. \u5982\u679c\u4e0d\u6307\u5b9a, \u5219\u9ed8\u8ba4\u4e3asdef[0]\u7684src</p> <code>None</code> <p>Examples:</p> Python<pre><code>spawn = get.spawn(st.friend)\n\n# \u4e00\u4e2aCarrier\u7684\u72b6\u6001\u673a\nsc = Stage([\n    # \u4efb\u4f55\u72b6\u6001\u4e0b\uff0c\u5982\u679c\u6211\u6ca1\u6709\u80fd\u91cf\u50a8\u5907\u4e86\uff0c\u5c31\u53bb\u83b7\u53d6Energy\n    ['*', 'fetch', lambda s, t: get.energy(s.unit) == 0, lambda s, t: put.fetch(s.unit, get.closest(s.unit, get.boxes(st.energetic)))],\n    # \u4efb\u4f55\u72b6\u6001\u4e0b\uff0c\u5982\u679c\u6211\u8eab\u4e0a\u6709\u80fd\u91cf\uff0c\u5c31\u628a\u80fd\u91cf\u5e26\u56de\u5bb6\n    ['*', 'deposit', lambda s, t: get.energy(s.unit) &gt; 0, lambda s, t: put.deposit(s.unit, spawn)],\n])\n\n\ndef loop():\n    if not sc.unit:\n        res = put.create(spawn, [CARRY, MOVE])\n        sc.unit = res if st.creep(res) else None\n    else:\n        print('carrier:', sc.next())\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>class Stage:\n    \"\"\"\n    \u6709\u9650\u72b6\u6001\u673a\n\n    .current: str \u5f53\u524d\u72b6\u6001\n\n    .next(): str \u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n\n    Args:\n        sdef: \u4e00\u4e2alist\u5bf9\u8c61, \u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u8f6c\u79fb\u5b9a\u4e49: &lt;br/&gt;[src: str | tuple, dst: str | tuple, condition: callable -&gt; bool, action: callable]\n\n            * \u6bcf\u4e2acallable\u5f62\u5982 callable(stage:Stage, trans-local:object). stage\u8868\u793a\u6240\u6709\u5f53\u524d\u7684Stage\u5b9e\u4f8b; trans-local\u8868\u793a\u5f53\u524d\u8f6c\u79fb\u5185\u90e8\u7684\u5c40\u90e8\u7a7a\u95f4\n\n            * \u5982\u679c\u662f\u56fa\u5b9a\u8df3\u8f6c\uff0c\u90a3\u4e48\u53ef\u4ee5\u53ea\u4f20\u5165action\u3002\u5373: [src: str | tuple, dst: str | tuple, action: callable]\n\n            !!! \u6ce8\u610f: sdef\u4e0d\u80fd\u662f\u7a7a\u5217\u8868\n\n            * \u7279\u522b\u7684\uff0csrc\u53ef\u4ee5\u662f \uff0a\u3002\u5f53\u67d0\u4e2asrc\u6ca1\u6709\u4efb\u4f55\u53ef\u884c\u8df3\u8f6c\u65f6\uff0c\u4f1a\u5c1d\u8bd5\u4f7f\u7528 \uff0a -&gt; \u7684\u8df3\u8f6c\u5224\u65ad\u3002\n\n            * \u7279\u522b\u7684\uff0csrc\u548cdst\u53ef\u4ee5\u662ftuple\u3002\u8fd9\u901a\u5e38\u8868\u793a\u4e8c\u8005\u7684condition\u548caction\u662f\u4e00\u6837\u7684\u3002\n\n            \u4f8b\u5982: [('a', 'b'), 'c', ...]\u5c06\u88ab\u89e3\u6790\u4e3a ['a', 'b', ...], ['b', 'c', ...]\n\n        entry: \u521d\u59cb\u72b6\u6001. \u5982\u679c\u4e0d\u6307\u5b9a, \u5219\u9ed8\u8ba4\u4e3asdef[0]\u7684src\n\n    Examples:\n        ```python\n        spawn = get.spawn(st.friend)\n\n        # \u4e00\u4e2aCarrier\u7684\u72b6\u6001\u673a\n        sc = Stage([\n            # \u4efb\u4f55\u72b6\u6001\u4e0b\uff0c\u5982\u679c\u6211\u6ca1\u6709\u80fd\u91cf\u50a8\u5907\u4e86\uff0c\u5c31\u53bb\u83b7\u53d6Energy\n            ['*', 'fetch', lambda s, t: get.energy(s.unit) == 0, lambda s, t: put.fetch(s.unit, get.closest(s.unit, get.boxes(st.energetic)))],\n            # \u4efb\u4f55\u72b6\u6001\u4e0b\uff0c\u5982\u679c\u6211\u8eab\u4e0a\u6709\u80fd\u91cf\uff0c\u5c31\u628a\u80fd\u91cf\u5e26\u56de\u5bb6\n            ['*', 'deposit', lambda s, t: get.energy(s.unit) &gt; 0, lambda s, t: put.deposit(s.unit, spawn)],\n        ])\n\n\n        def loop():\n            if not sc.unit:\n                res = put.create(spawn, [CARRY, MOVE])\n                sc.unit = res if st.creep(res) else None\n            else:\n                print('carrier:', sc.next())\n        ```\n    \"\"\"\n\n    def __init__(self, sdef: list, entry: str = None):\n        self._raw = sdef\n        def_len = len(sdef)\n        if def_len == 0:\n            raise ValueError(\"Empty transition definition\")\n\n        # \u83b7\u53d6\u72b6\u6001\u96c6 set[str]\n        # \u83b7\u53d6\u72b6\u6001\u8f6c\u79fb\u5b57\u5178 dict[src, list[tuple(dst, condition, action)]]  # \u82e5\u65e0action, \u5219\u4e3aNone\n        self._trans, self._any_trans, tmp = {}, [], []\n\n        for i in range(len(sdef)):\n            item = sdef[i]\n\n            # \u8fd9\u4e00\u6bb5\u662f\u8003\u8651\u5230transcrypt\u7684\u8bed\u6cd5\u89e3\u6790\u95ee\u9898\uff0c\u4e0d\u6562\u5199\u7684\u592a\u98ce\u9a9a: for src, dst, *rest in smdef. \u6015\u51fa\u95ee\u9898\n            len_trans = len(item)\n            if not 3 &lt;= len_trans &lt;= 4:\n                raise ValueError(f\"Invalid transition definition: {sdef[i]}\")\n            src, dst, cond = item[0], item[1], item[2]\n            action = item[3] if len_trans == 4 else None\n\n            if isinstance(src, str):\n                src = [src]\n\n            if isinstance(dst, str):\n                dst = [dst]\n\n            # \u5f62\u5f0f\u4e0a\u5199\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u5171\u7528\u4e00\u4e2aDataArea\n            da = DataArea()\n\n            for _src in src:\n                for _dst in dst:\n                    if _src != '*':\n                        # \u5199\u5165\u5230\u5e38\u89c4\u8df3\u8f6c\u8868\n                        stage_node = self._trans.py_get(_src, None)\n                        if stage_node:\n                            stage_node.append((_dst, cond, action, da))\n                        else:\n                            self._trans[_src] = [(_dst, cond, action, da)]\n\n                        tmp.extend([_src, _dst])\n                    else:\n                        self._any_trans.append((_dst, cond, action, da))\n\n        # \u518d\u628aany_trans\u6dfb\u52a0\u5230\u6240\u6709\u8df3\u8f6c\u96c6\u7684\u672b\u5c3e\n        for v in self._trans.values():\n            v.extend(self._any_trans)\n\n        self._states = set(tmp)\n        self.current = entry if entry else sdef[0][0]  # \u5f53\u524d\u72b6\u6001 str\n\n        # // \u66f4\u65b0\u51fd\u6570\u96c6\n        self._su = []  # (attr_name, value_func)\n        self._cu = {}  # current: [(attr_name, value_func)]\n        self._tu = {}  # (src, dst): [(attr_name, value_func)]\n\n    def asu(self, attr_name: str, value_func: callable):\n        \"\"\"\n        Add Stage Update&lt;br/&gt;\n        \u6dfb\u52a0\u5c5e\u6027\u66f4\u65b0\u51fd\u6570&lt;br/&gt;\n        \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7684next\u65f6\u81ea\u52a8\u66f4\u65b0\u5c5e\u6027&lt;br/&gt;\n        * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0\n\n        Args:\n            attr_name: str \u5c5e\u6027\u540d\n            value_func: callable(s) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b\n\n        Returns:\n\n        Examples:\n            ```python\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            sc = Stage([\n                ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n                ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n            ])\n\n            # update on every next\n            sc.asu('energy', lambda s: get.energy(carrier))\n            # update on every next if current is 'boxing'\n            sc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n            # only update when 'home -&gt; boxing'\n            sc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n            ```\n\n        \"\"\"\n        self._su.append((attr_name, value_func))\n\n    def acu(self, current: str | tuple, attr_name: str, value_func: callable):\n        \"\"\"\n        Add Current Update&lt;br/&gt;\n        \u6dfb\u52a0\u7279\u5b9a\u72b6\u6001\u4e0b\u7684\u5c5e\u6027\u66f4\u65b0\u51fd\u6570&lt;br/&gt;\n        \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7279\u5b9acurrent\u4e0b\u7684next\u65f6\u81ea\u52a8\u66f4\u65b0\u5c5e\u6027&lt;br/&gt;\n        * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0\n\n        Args:\n            current: str | tuple \u5f53\u524d\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0\n            attr_name: str \u5c5e\u6027\u540d\n            value_func: callable(s) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b\n\n        Returns:\n\n        Examples:\n            ```python\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            sc = Stage([\n                ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n                ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n            ])\n\n            # update on every next\n            sc.asu('energy', lambda s: get.energy(carrier))\n            # update on every next if current is 'boxing'\n            sc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n            # only update when 'home -&gt; boxing'\n            sc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n            ```\n        \"\"\"\n        if isinstance(current, str):\n            current = [current]\n        for c in current:\n            v = self._cu.py_get(c, None)\n            if not v:\n                v = []\n                self._cu[c] = v\n            v.append((attr_name, value_func))\n\n    def atu(self, src: str | tuple, dst: str | tuple, attr_name: str, value_func: callable):\n        \"\"\"\n        Add Trans Update&lt;br/&gt;\n        \u6dfb\u52a0\u7279\u5b9a\u8f6c\u79fb\u65f6\u7684\u5c5e\u6027\u66f4\u65b0\u51fd\u6570&lt;br/&gt;\n        \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7279\u5b9a src-&gt;dst \u65f6\u5bf9trans-area\u4e2d\u5c5e\u6027\u7684\u81ea\u52a8\u66f4\u65b0&lt;br/&gt;\n        * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0\n\n        Args:\n            src: str | tuple \u5f53\u524d\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0\n            dst: str | tuple \u76ee\u6807\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0\n            attr_name: str \u5c5e\u6027\u540d\n            value_func: callable(s, t) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b, t\u4e3a\u5f53\u524d\u8f6c\u79fb\u7684\u5c40\u90e8\u7a7a\u95f4\n\n        Returns:\n\n        Examples:\n            ```python\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            sc = Stage([\n                ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n                ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n            ])\n\n            # update on every next\n            sc.asu('energy', lambda s: get.energy(carrier))\n            # update on every next if current is 'boxing'\n            sc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n            # only update when 'home -&gt; boxing'\n            sc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n            ```\n        \"\"\"\n        if isinstance(src, str):\n            src = [src]\n        if isinstance(dst, str):\n            dst = [dst]\n        for s in src:\n            for d in dst:\n                v = self._tu.py_get((s, d), None)\n                if not v:\n                    v = []\n                    self._tu[(s, d)] = v\n                v.append((attr_name, value_func))\n\n    def next(self, log: bool = True) -&gt; str:\n        \"\"\"\n        \u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n\n        Args:\n            log: \u662f\u5426\u8fd4\u56delog\u4fe1\u606f\n\n        Returns:\n            str: log=False: \u4e0b\u4e00\u4e2a\u72b6\u6001. \u5982\u679c\u6ca1\u6709\u8fdb\u884c\u8f6c\u79fb, \u5219\u8fd4\u56de\u5f53\u524d\u72b6\u6001 | log=True: \u8fd4\u56de\u4e00\u53e5\u8df3\u8f6c\u4fe1\u606f: 'src -&gt; dst'\n        \"\"\"\n\n        # \u66f4\u65b0su\n        for a_name, vfn in self._su:\n            setattr(self, a_name, vfn(self))\n\n        # \u66f4\u65b0cu\n        v = self._cu.py_get(self.current, None)\n        if v:\n            for a_name, vfn in v:\n                setattr(self, a_name, vfn(self))\n\n        tset = self._trans.py_get(self.current)\n        tset = tset if tset else self._any_trans\n        for dst, cond, action, trans_local in tset:\n            v = self._tu.py_get((self.current, dst), None)\n            if v:\n                for a_name, vfn in v:\n                    setattr(trans_local, a_name, vfn(self, trans_local))\n\n            try:\n                cond_res = bool(cond(self, trans_local))\n            except Exception as e:\n                raise ValueError(f\"[Stage] {self.current} -&gt; {dst}: Usr Condition error: \\n{e}\")\n\n            if not action:\n                cond_res = True\n\n            if cond_res:\n                if action:\n                    try:\n                        action(self, trans_local)\n                    except Exception as e:\n                        raise ValueError(f\"[Stage] {self.current} -&gt; {dst}: Usr Action error: \\n{e}\")\n                info = self.current + \" -&gt; \" + dst\n                self.current = dst\n                if log:\n                    return info\n                return dst\n        if log:\n            return self.current + \" -&gt; \" + self.current\n        return self.current\n\n    def copy(self):\n        \"\"\"\n        '\u590d\u5236'\u4e00\u4e2aStage\u5b9e\u4f8b\n\n        * \u53ea\u4f1a\u590d\u5236\u5f53\u524dsdef\u548c\u5404\u79cdupdate\u51fd\u6570\uff0c\u4e0d\u4f1a\u590d\u5236\u5f53\u524d\u72b6\u6001\u548c\u5c40\u90e8\u7a7a\u95f4\u6570\u636e\n\n        Returns:\n            Stage\n\n        \"\"\"\n        s = Stage(self._raw)\n        s._su = self._su.copy()\n        s._cu = self._cu.copy()\n        s._tu = self._tu.copy()\n        return s\n</code></pre>"},{"location":"src/std/#src.std.Stage.acu","title":"<code>acu(current, attr_name, value_func)</code>","text":"<p>Add Current Update \u6dfb\u52a0\u7279\u5b9a\u72b6\u6001\u4e0b\u7684\u5c5e\u6027\u66f4\u65b0\u51fd\u6570 \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7279\u5b9acurrent\u4e0b\u7684next\u65f6\u81ea\u52a8\u66f4\u65b0\u5c5e\u6027 * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0</p> <p>Parameters:</p> Name Type Description Default <code>current</code> <code>str | tuple</code> <p>str | tuple \u5f53\u524d\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0</p> required <code>attr_name</code> <code>str</code> <p>str \u5c5e\u6027\u540d</p> required <code>value_func</code> <code>callable</code> <p>callable(s) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b</p> required <p>Examples:</p> Python<pre><code>carrier = get.friend(lambda obj: obj.name == 'carrier')\nsc = Stage([\n    ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n    ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n])\n\n# update on every next\nsc.asu('energy', lambda s: get.energy(carrier))\n# update on every next if current is 'boxing'\nsc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n# only update when 'home -&gt; boxing'\nsc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>def acu(self, current: str | tuple, attr_name: str, value_func: callable):\n    \"\"\"\n    Add Current Update&lt;br/&gt;\n    \u6dfb\u52a0\u7279\u5b9a\u72b6\u6001\u4e0b\u7684\u5c5e\u6027\u66f4\u65b0\u51fd\u6570&lt;br/&gt;\n    \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7279\u5b9acurrent\u4e0b\u7684next\u65f6\u81ea\u52a8\u66f4\u65b0\u5c5e\u6027&lt;br/&gt;\n    * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0\n\n    Args:\n        current: str | tuple \u5f53\u524d\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0\n        attr_name: str \u5c5e\u6027\u540d\n        value_func: callable(s) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b\n\n    Returns:\n\n    Examples:\n        ```python\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        sc = Stage([\n            ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n            ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n        ])\n\n        # update on every next\n        sc.asu('energy', lambda s: get.energy(carrier))\n        # update on every next if current is 'boxing'\n        sc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n        # only update when 'home -&gt; boxing'\n        sc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n        ```\n    \"\"\"\n    if isinstance(current, str):\n        current = [current]\n    for c in current:\n        v = self._cu.py_get(c, None)\n        if not v:\n            v = []\n            self._cu[c] = v\n        v.append((attr_name, value_func))\n</code></pre>"},{"location":"src/std/#src.std.Stage.asu","title":"<code>asu(attr_name, value_func)</code>","text":"<p>Add Stage Update \u6dfb\u52a0\u5c5e\u6027\u66f4\u65b0\u51fd\u6570 \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7684next\u65f6\u81ea\u52a8\u66f4\u65b0\u5c5e\u6027 * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0</p> <p>Parameters:</p> Name Type Description Default <code>attr_name</code> <code>str</code> <p>str \u5c5e\u6027\u540d</p> required <code>value_func</code> <code>callable</code> <p>callable(s) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b</p> required <p>Examples:</p> Python<pre><code>carrier = get.friend(lambda obj: obj.name == 'carrier')\nsc = Stage([\n    ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n    ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n])\n\n# update on every next\nsc.asu('energy', lambda s: get.energy(carrier))\n# update on every next if current is 'boxing'\nsc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n# only update when 'home -&gt; boxing'\nsc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>def asu(self, attr_name: str, value_func: callable):\n    \"\"\"\n    Add Stage Update&lt;br/&gt;\n    \u6dfb\u52a0\u5c5e\u6027\u66f4\u65b0\u51fd\u6570&lt;br/&gt;\n    \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7684next\u65f6\u81ea\u52a8\u66f4\u65b0\u5c5e\u6027&lt;br/&gt;\n    * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0\n\n    Args:\n        attr_name: str \u5c5e\u6027\u540d\n        value_func: callable(s) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b\n\n    Returns:\n\n    Examples:\n        ```python\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        sc = Stage([\n            ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n            ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n        ])\n\n        # update on every next\n        sc.asu('energy', lambda s: get.energy(carrier))\n        # update on every next if current is 'boxing'\n        sc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n        # only update when 'home -&gt; boxing'\n        sc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n        ```\n\n    \"\"\"\n    self._su.append((attr_name, value_func))\n</code></pre>"},{"location":"src/std/#src.std.Stage.atu","title":"<code>atu(src, dst, attr_name, value_func)</code>","text":"<p>Add Trans Update \u6dfb\u52a0\u7279\u5b9a\u8f6c\u79fb\u65f6\u7684\u5c5e\u6027\u66f4\u65b0\u51fd\u6570 \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7279\u5b9a src-&gt;dst \u65f6\u5bf9trans-area\u4e2d\u5c5e\u6027\u7684\u81ea\u52a8\u66f4\u65b0 * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str | tuple</code> <p>str | tuple \u5f53\u524d\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0</p> required <code>dst</code> <code>str | tuple</code> <p>str | tuple \u76ee\u6807\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0</p> required <code>attr_name</code> <code>str</code> <p>str \u5c5e\u6027\u540d</p> required <code>value_func</code> <code>callable</code> <p>callable(s, t) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b, t\u4e3a\u5f53\u524d\u8f6c\u79fb\u7684\u5c40\u90e8\u7a7a\u95f4</p> required <p>Examples:</p> Python<pre><code>carrier = get.friend(lambda obj: obj.name == 'carrier')\nsc = Stage([\n    ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n    ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n])\n\n# update on every next\nsc.asu('energy', lambda s: get.energy(carrier))\n# update on every next if current is 'boxing'\nsc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n# only update when 'home -&gt; boxing'\nsc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>def atu(self, src: str | tuple, dst: str | tuple, attr_name: str, value_func: callable):\n    \"\"\"\n    Add Trans Update&lt;br/&gt;\n    \u6dfb\u52a0\u7279\u5b9a\u8f6c\u79fb\u65f6\u7684\u5c5e\u6027\u66f4\u65b0\u51fd\u6570&lt;br/&gt;\n    \u7528\u4e8e\u5728\u72b6\u6001\u673a\u7279\u5b9a src-&gt;dst \u65f6\u5bf9trans-area\u4e2d\u5c5e\u6027\u7684\u81ea\u52a8\u66f4\u65b0&lt;br/&gt;\n    * \u6682\u65f6\u65e0\u6cd5\u79fb\u9664\uff0c\u8c28\u614e\u6dfb\u52a0\n\n    Args:\n        src: str | tuple \u5f53\u524d\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0\n        dst: str | tuple \u76ee\u6807\u72b6\u6001, \u5982\u679c\u662ftuple\u5219\u8868\u793a\u591a\u4e2a\u72b6\u6001\u5747\u6dfb\u52a0\n        attr_name: str \u5c5e\u6027\u540d\n        value_func: callable(s, t) -&gt; any \u66f4\u65b0\u51fd\u6570\uff0cs\u4e3a\u5f53\u524dStage\u5b9e\u4f8b, t\u4e3a\u5f53\u524d\u8f6c\u79fb\u7684\u5c40\u90e8\u7a7a\u95f4\n\n    Returns:\n\n    Examples:\n        ```python\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        sc = Stage([\n            ['home', 'boxing', lambda s, t: s.energy == 0, lambda s, t: put.fetch(carrier, t.box)],\n            ['boxing', 'home', lambda s, t: s.energy &gt; 0, lambda s, t: put.deposit(carrier, s.spawn)],\n        ])\n\n        # update on every next\n        sc.asu('energy', lambda s: get.energy(carrier))\n        # update on every next if current is 'boxing'\n        sc.acu('boxing', 'spawn', lambda s: get.spawn(st.friend))  # \u5b9e\u9645\u5efa\u8bae\u5c06spawn\u653e\u5728\u5168\u5c40\u521d\u59cb\u5316\u4e2d, \u8fd9\u91cc\u53ea\u662f\u4e3e\u4f8b\n        # only update when 'home -&gt; boxing'\n        sc.atu('home', 'boxing', 'box', lambda s, t: get.closest(carrier, get.boxes(st.energetic)) )\n        ```\n    \"\"\"\n    if isinstance(src, str):\n        src = [src]\n    if isinstance(dst, str):\n        dst = [dst]\n    for s in src:\n        for d in dst:\n            v = self._tu.py_get((s, d), None)\n            if not v:\n                v = []\n                self._tu[(s, d)] = v\n            v.append((attr_name, value_func))\n</code></pre>"},{"location":"src/std/#src.std.Stage.copy","title":"<code>copy()</code>","text":"<p>'\u590d\u5236'\u4e00\u4e2aStage\u5b9e\u4f8b</p> <ul> <li>\u53ea\u4f1a\u590d\u5236\u5f53\u524dsdef\u548c\u5404\u79cdupdate\u51fd\u6570\uff0c\u4e0d\u4f1a\u590d\u5236\u5f53\u524d\u72b6\u6001\u548c\u5c40\u90e8\u7a7a\u95f4\u6570\u636e</li> </ul> <p>Returns:</p> Type Description <p>Stage</p> Source code in <code>src\\std.py</code> Python<pre><code>def copy(self):\n    \"\"\"\n    '\u590d\u5236'\u4e00\u4e2aStage\u5b9e\u4f8b\n\n    * \u53ea\u4f1a\u590d\u5236\u5f53\u524dsdef\u548c\u5404\u79cdupdate\u51fd\u6570\uff0c\u4e0d\u4f1a\u590d\u5236\u5f53\u524d\u72b6\u6001\u548c\u5c40\u90e8\u7a7a\u95f4\u6570\u636e\n\n    Returns:\n        Stage\n\n    \"\"\"\n    s = Stage(self._raw)\n    s._su = self._su.copy()\n    s._cu = self._cu.copy()\n    s._tu = self._tu.copy()\n    return s\n</code></pre>"},{"location":"src/std/#src.std.Stage.next","title":"<code>next(log=True)</code>","text":"<p>\u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001</p> <p>Parameters:</p> Name Type Description Default <code>log</code> <code>bool</code> <p>\u662f\u5426\u8fd4\u56delog\u4fe1\u606f</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>log=False: \u4e0b\u4e00\u4e2a\u72b6\u6001. \u5982\u679c\u6ca1\u6709\u8fdb\u884c\u8f6c\u79fb, \u5219\u8fd4\u56de\u5f53\u524d\u72b6\u6001 | log=True: \u8fd4\u56de\u4e00\u53e5\u8df3\u8f6c\u4fe1\u606f: 'src -&gt; dst'</p> Source code in <code>src\\std.py</code> Python<pre><code>def next(self, log: bool = True) -&gt; str:\n    \"\"\"\n    \u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n\n    Args:\n        log: \u662f\u5426\u8fd4\u56delog\u4fe1\u606f\n\n    Returns:\n        str: log=False: \u4e0b\u4e00\u4e2a\u72b6\u6001. \u5982\u679c\u6ca1\u6709\u8fdb\u884c\u8f6c\u79fb, \u5219\u8fd4\u56de\u5f53\u524d\u72b6\u6001 | log=True: \u8fd4\u56de\u4e00\u53e5\u8df3\u8f6c\u4fe1\u606f: 'src -&gt; dst'\n    \"\"\"\n\n    # \u66f4\u65b0su\n    for a_name, vfn in self._su:\n        setattr(self, a_name, vfn(self))\n\n    # \u66f4\u65b0cu\n    v = self._cu.py_get(self.current, None)\n    if v:\n        for a_name, vfn in v:\n            setattr(self, a_name, vfn(self))\n\n    tset = self._trans.py_get(self.current)\n    tset = tset if tset else self._any_trans\n    for dst, cond, action, trans_local in tset:\n        v = self._tu.py_get((self.current, dst), None)\n        if v:\n            for a_name, vfn in v:\n                setattr(trans_local, a_name, vfn(self, trans_local))\n\n        try:\n            cond_res = bool(cond(self, trans_local))\n        except Exception as e:\n            raise ValueError(f\"[Stage] {self.current} -&gt; {dst}: Usr Condition error: \\n{e}\")\n\n        if not action:\n            cond_res = True\n\n        if cond_res:\n            if action:\n                try:\n                    action(self, trans_local)\n                except Exception as e:\n                    raise ValueError(f\"[Stage] {self.current} -&gt; {dst}: Usr Action error: \\n{e}\")\n            info = self.current + \" -&gt; \" + dst\n            self.current = dst\n            if log:\n                return info\n            return dst\n    if log:\n        return self.current + \" -&gt; \" + self.current\n    return self.current\n</code></pre>"},{"location":"src/std/#src.std.View","title":"<code>View</code>","text":"Source code in <code>src\\std.py</code> Python<pre><code>class View:\n    NAME_OPTS = Options()\n\n    def __init__(self, layer: int, persistent: bool = True):\n        self.v = object\n        # insert self.v = new Visual(layer, persistent);\n\n    def clear(self):\n        \"\"\"\n        \u6e05\u7a7a\u5f53\u524d\u89c6\u56fe\n\n        Returns:\n            View\n        \"\"\"\n        self.v.clear()  # ignore;\n        return self\n\n    def text(self, text: str, pos: st.point, font:str|int|float, color:str, options: Options = None):\n        \"\"\"\n        \u7ed8\u5236\u6587\u5b57\n\n        Args:\n            text: str (X) \u6587\u5b57\u5185\u5bb9\n            pos: st.point (X) \u6587\u5b57\u4f4d\u7f6e\n            font: str | int | float (X) \u5b57\u4f53\u5927\u5c0f \u53ef\u4ee5\u662f 0.5 '12px' \u8fd9\u6837\u7684\n            color: str (X) \u989c\u8272  \u6bd4\u5982 '#FF0000'\n            options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n        Returns:\n            View\n        \"\"\"\n        options = options or Options()\n        options.font = font\n        options.color = color\n        self.v.text(text, pos, options)\n        return self\n\n    def circle(self, pos: st.point, radius: float, fill:str=None, options: Options = None):\n        \"\"\"\n        \u7ed8\u5236\u5706\u5f62\n\n        Args:\n            pos: st.point (X) \u5706\u5fc3\u5750\u6807\n            radius: float (X) \u534a\u5f84\n            fill: str (X) \u586b\u5145\u989c\u8272\n            options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n        Returns:\n            View\n        \"\"\"\n        options = options or Options()\n        options.radius = radius\n        options.fill = fill\n        self.v.circle(pos, options)\n        return self\n\n    def line(self, pos1: st.point, pos2: st.point, width: float = 0.1, color: str = None, options: Options = None):\n        \"\"\"\n        \u7ed8\u5236\u7ebf\u6bb5\n\n        Args:\n            pos1: st.point (X) \u8d77\u70b9\u5750\u6807\n            pos2: st.point (X) \u7ec8\u70b9\u5750\u6807\n            width: float (X) \u7ebf\u5bbd\n            color: str (X) \u989c\u8272\n            options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n        Returns:\n            View\n        \"\"\"\n        options = options or Options()\n        options.width = width\n        options.color = color\n        self.v.line(pos1, pos2, options)\n        return self\n\n    def rect(self, pos: st.point, width: float, height: float, fill: str = None, options: Options = None):\n        \"\"\"\n        \u7ed8\u5236\u77e9\u5f62\n\n        Args:\n            pos: st.point (X) \u5de6\u4e0a\u89d2\u5750\u6807\n            width: float (X) \u5bbd\u5ea6\n            height: float (X) \u9ad8\u5ea6\n            fill: str (X) \u586b\u5145\u989c\u8272\n            options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n        Returns:\n            View\n        \"\"\"\n        options = options or Options()\n        options.fill = fill\n        self.v.rect(pos, width, height, options)\n        return self\n\n    def poly(self, points: list[st.point], fill: str = None, options: Options = None):\n        \"\"\"\n        \u7ed8\u5236\u591a\u8fb9\u5f62\n\n        Args:\n            points: list[st.point] (X) \u591a\u8fb9\u5f62\u7684\u9876\u70b9\u5750\u6807\n            fill: str (X) \u586b\u5145\u989c\u8272\n            options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n        Returns:\n            View\n        \"\"\"\n        options = options or Options()\n        options.fill = fill\n\n        # insert var array = [];\n        # insert for (var i = 0; i &lt; len(points); i++) {\n        # insert     array.push(points[i]);\n        # insert }\n\n        self.v.poly(array, options)\n        return self\n\n    def size(self):\n        \"\"\"\n        \u8fd4\u56de\u89c6\u56fe\u7684\u5927\u5c0f&lt;br/&gt;\n        * \u8be6\u89c1ScreepsArena\u6587\u6863\n\n        Returns:\n            int\n        \"\"\"\n        return self.v.size()\n\n    def header(self, creep: st.creep):\n        \"\"\"\n        \u4e3a\u4e00\u4e2aCreep\u7ed8\u5236\u6807\u9898\n        Args:\n            creep:\n\n        Returns:\n\n        \"\"\"\n        if creep:\n            txt = creep.name or \"\"\n            hp_percent = get.health(creep, True)  # int:0 - 100\n            _hex = Math.floor(hp_percent * 255 / 100).toString(16).padStart(2, '0');\n            color = f'#AE{_hex}80'\n            txt += f\"|{hp_percent}\"\n            self.text(txt, get.offset(creep, 0, -0.6), 0.4, color, View.NAME_OPTS)\n        return self\n</code></pre>"},{"location":"src/std/#src.std.View.circle","title":"<code>circle(pos, radius, fill=None, options=None)</code>","text":"<p>\u7ed8\u5236\u5706\u5f62</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>point</code> <p>st.point (X) \u5706\u5fc3\u5750\u6807</p> required <code>radius</code> <code>float</code> <p>float (X) \u534a\u5f84</p> required <code>fill</code> <code>str</code> <p>str (X) \u586b\u5145\u989c\u8272</p> <code>None</code> <code>options</code> <code>Options</code> <p>\u8be6\u89c1ScreepsArena\u6587\u6863</p> <code>None</code> <p>Returns:</p> Type Description <p>View</p> Source code in <code>src\\std.py</code> Python<pre><code>def circle(self, pos: st.point, radius: float, fill:str=None, options: Options = None):\n    \"\"\"\n    \u7ed8\u5236\u5706\u5f62\n\n    Args:\n        pos: st.point (X) \u5706\u5fc3\u5750\u6807\n        radius: float (X) \u534a\u5f84\n        fill: str (X) \u586b\u5145\u989c\u8272\n        options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n    Returns:\n        View\n    \"\"\"\n    options = options or Options()\n    options.radius = radius\n    options.fill = fill\n    self.v.circle(pos, options)\n    return self\n</code></pre>"},{"location":"src/std/#src.std.View.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u5f53\u524d\u89c6\u56fe</p> <p>Returns:</p> Type Description <p>View</p> Source code in <code>src\\std.py</code> Python<pre><code>def clear(self):\n    \"\"\"\n    \u6e05\u7a7a\u5f53\u524d\u89c6\u56fe\n\n    Returns:\n        View\n    \"\"\"\n    self.v.clear()  # ignore;\n    return self\n</code></pre>"},{"location":"src/std/#src.std.View.header","title":"<code>header(creep)</code>","text":"<p>\u4e3a\u4e00\u4e2aCreep\u7ed8\u5236\u6807\u9898 Args:     creep:</p> <p>Returns:</p> Source code in <code>src\\std.py</code> Python<pre><code>def header(self, creep: st.creep):\n    \"\"\"\n    \u4e3a\u4e00\u4e2aCreep\u7ed8\u5236\u6807\u9898\n    Args:\n        creep:\n\n    Returns:\n\n    \"\"\"\n    if creep:\n        txt = creep.name or \"\"\n        hp_percent = get.health(creep, True)  # int:0 - 100\n        _hex = Math.floor(hp_percent * 255 / 100).toString(16).padStart(2, '0');\n        color = f'#AE{_hex}80'\n        txt += f\"|{hp_percent}\"\n        self.text(txt, get.offset(creep, 0, -0.6), 0.4, color, View.NAME_OPTS)\n    return self\n</code></pre>"},{"location":"src/std/#src.std.View.line","title":"<code>line(pos1, pos2, width=0.1, color=None, options=None)</code>","text":"<p>\u7ed8\u5236\u7ebf\u6bb5</p> <p>Parameters:</p> Name Type Description Default <code>pos1</code> <code>point</code> <p>st.point (X) \u8d77\u70b9\u5750\u6807</p> required <code>pos2</code> <code>point</code> <p>st.point (X) \u7ec8\u70b9\u5750\u6807</p> required <code>width</code> <code>float</code> <p>float (X) \u7ebf\u5bbd</p> <code>0.1</code> <code>color</code> <code>str</code> <p>str (X) \u989c\u8272</p> <code>None</code> <code>options</code> <code>Options</code> <p>\u8be6\u89c1ScreepsArena\u6587\u6863</p> <code>None</code> <p>Returns:</p> Type Description <p>View</p> Source code in <code>src\\std.py</code> Python<pre><code>def line(self, pos1: st.point, pos2: st.point, width: float = 0.1, color: str = None, options: Options = None):\n    \"\"\"\n    \u7ed8\u5236\u7ebf\u6bb5\n\n    Args:\n        pos1: st.point (X) \u8d77\u70b9\u5750\u6807\n        pos2: st.point (X) \u7ec8\u70b9\u5750\u6807\n        width: float (X) \u7ebf\u5bbd\n        color: str (X) \u989c\u8272\n        options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n    Returns:\n        View\n    \"\"\"\n    options = options or Options()\n    options.width = width\n    options.color = color\n    self.v.line(pos1, pos2, options)\n    return self\n</code></pre>"},{"location":"src/std/#src.std.View.poly","title":"<code>poly(points, fill=None, options=None)</code>","text":"<p>\u7ed8\u5236\u591a\u8fb9\u5f62</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list[point]</code> <p>list[st.point] (X) \u591a\u8fb9\u5f62\u7684\u9876\u70b9\u5750\u6807</p> required <code>fill</code> <code>str</code> <p>str (X) \u586b\u5145\u989c\u8272</p> <code>None</code> <code>options</code> <code>Options</code> <p>\u8be6\u89c1ScreepsArena\u6587\u6863</p> <code>None</code> <p>Returns:</p> Type Description <p>View</p> Source code in <code>src\\std.py</code> Python<pre><code>def poly(self, points: list[st.point], fill: str = None, options: Options = None):\n    \"\"\"\n    \u7ed8\u5236\u591a\u8fb9\u5f62\n\n    Args:\n        points: list[st.point] (X) \u591a\u8fb9\u5f62\u7684\u9876\u70b9\u5750\u6807\n        fill: str (X) \u586b\u5145\u989c\u8272\n        options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n    Returns:\n        View\n    \"\"\"\n    options = options or Options()\n    options.fill = fill\n\n    # insert var array = [];\n    # insert for (var i = 0; i &lt; len(points); i++) {\n    # insert     array.push(points[i]);\n    # insert }\n\n    self.v.poly(array, options)\n    return self\n</code></pre>"},{"location":"src/std/#src.std.View.rect","title":"<code>rect(pos, width, height, fill=None, options=None)</code>","text":"<p>\u7ed8\u5236\u77e9\u5f62</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>point</code> <p>st.point (X) \u5de6\u4e0a\u89d2\u5750\u6807</p> required <code>width</code> <code>float</code> <p>float (X) \u5bbd\u5ea6</p> required <code>height</code> <code>float</code> <p>float (X) \u9ad8\u5ea6</p> required <code>fill</code> <code>str</code> <p>str (X) \u586b\u5145\u989c\u8272</p> <code>None</code> <code>options</code> <code>Options</code> <p>\u8be6\u89c1ScreepsArena\u6587\u6863</p> <code>None</code> <p>Returns:</p> Type Description <p>View</p> Source code in <code>src\\std.py</code> Python<pre><code>def rect(self, pos: st.point, width: float, height: float, fill: str = None, options: Options = None):\n    \"\"\"\n    \u7ed8\u5236\u77e9\u5f62\n\n    Args:\n        pos: st.point (X) \u5de6\u4e0a\u89d2\u5750\u6807\n        width: float (X) \u5bbd\u5ea6\n        height: float (X) \u9ad8\u5ea6\n        fill: str (X) \u586b\u5145\u989c\u8272\n        options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n    Returns:\n        View\n    \"\"\"\n    options = options or Options()\n    options.fill = fill\n    self.v.rect(pos, width, height, options)\n    return self\n</code></pre>"},{"location":"src/std/#src.std.View.size","title":"<code>size()</code>","text":"<p>\u8fd4\u56de\u89c6\u56fe\u7684\u5927\u5c0f * \u8be6\u89c1ScreepsArena\u6587\u6863</p> <p>Returns:</p> Type Description <p>int</p> Source code in <code>src\\std.py</code> Python<pre><code>def size(self):\n    \"\"\"\n    \u8fd4\u56de\u89c6\u56fe\u7684\u5927\u5c0f&lt;br/&gt;\n    * \u8be6\u89c1ScreepsArena\u6587\u6863\n\n    Returns:\n        int\n    \"\"\"\n    return self.v.size()\n</code></pre>"},{"location":"src/std/#src.std.View.text","title":"<code>text(text, pos, font, color, options=None)</code>","text":"<p>\u7ed8\u5236\u6587\u5b57</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>str (X) \u6587\u5b57\u5185\u5bb9</p> required <code>pos</code> <code>point</code> <p>st.point (X) \u6587\u5b57\u4f4d\u7f6e</p> required <code>font</code> <code>str | int | float</code> <p>str | int | float (X) \u5b57\u4f53\u5927\u5c0f \u53ef\u4ee5\u662f 0.5 '12px' \u8fd9\u6837\u7684</p> required <code>color</code> <code>str</code> <p>str (X) \u989c\u8272  \u6bd4\u5982 '#FF0000'</p> required <code>options</code> <code>Options</code> <p>\u8be6\u89c1ScreepsArena\u6587\u6863</p> <code>None</code> <p>Returns:</p> Type Description <p>View</p> Source code in <code>src\\std.py</code> Python<pre><code>def text(self, text: str, pos: st.point, font:str|int|float, color:str, options: Options = None):\n    \"\"\"\n    \u7ed8\u5236\u6587\u5b57\n\n    Args:\n        text: str (X) \u6587\u5b57\u5185\u5bb9\n        pos: st.point (X) \u6587\u5b57\u4f4d\u7f6e\n        font: str | int | float (X) \u5b57\u4f53\u5927\u5c0f \u53ef\u4ee5\u662f 0.5 '12px' \u8fd9\u6837\u7684\n        color: str (X) \u989c\u8272  \u6bd4\u5982 '#FF0000'\n        options: \u8be6\u89c1ScreepsArena\u6587\u6863\n\n    Returns:\n        View\n    \"\"\"\n    options = options or Options()\n    options.font = font\n    options.color = color\n    self.v.text(text, pos, options)\n    return self\n</code></pre>"},{"location":"src/std/#src.std.get","title":"<code>get</code>","text":"Source code in <code>src\\std.py</code> Python<pre><code>class get:\n    @staticmethod\n    def ticks() -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u5f53\u524d\u6e38\u620ftick\u6570\n\n        Returns:\n            int\n        \"\"\"\n        pass\n\n    @staticmethod\n    def cpu_time() -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u6e38\u620f\u5f53\u524dtick\u6d88\u8017\u7684cpu\u65f6\u95f4(us)\n\n        Returns:\n            int\n        \"\"\"\n        pass\n\n    @staticmethod\n    def heap() -&gt; HeapInfo:\n        \"\"\"\n        \u83b7\u53d6\u5f53\u524d\u6e38\u620f\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\n\n        Returns:\n            HeapInfo  \u5177\u4f53\u5c5e\u6027\u8be6\u89c1Arena\u7684HeapInfo\u7c7b\u578b\n        \"\"\"\n        pass\n\n    @staticmethod\n    def byid(id: str) -&gt; GameObject:\n        \"\"\"\n        \u901a\u8fc7id\u83b7\u53d6\u5bf9\u8c61\n\n        Args:\n            id: str (X) \u5bf9\u8c61\u7684id\n\n        Returns:\n            GameObject\n        \"\"\"\n        pass\n\n    # \u4e0a\u9762\u7684\u5b9a\u4e49\u662f\u7528\u4e8e\u6587\u6863\u751f\u6210\u7684\uff0c\u5b9e\u9645\u4e0a\u4e3a\u4e86\u51cf\u5c11cpu\u6d88\u8017\uff0c\u8fd9\u91cc\u4e0d\u4f1a\u518d\u5305\u88c5\u4e00\u5c42\u51fd\u6570\n    ticks = getTicks\n    cpu_time = getCpuTime\n    heap = getHeapStatistics\n    byid = getObjectById\n\n    @staticmethod\n    def distance(obj: st.point, target: st.point) -&gt; int:\n        \"\"\"\n        \u8fd4\u56deobj\u5230\u76ee\u6807\u7684\u8ddd\u79bb(\u5355\u4f4d: \u65b9\u5757\u6570)\n\n        Args:\n            obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n            target: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n\n        Returns:\n            int\n        \"\"\"\n        if target is None:\n            print('get.distance: target is None. Return 65535')\n            return 0xffff\n        return obj.getRangeTo(target)\n\n    @staticmethod\n    def sign(x: int) -&gt; int:\n        \"\"\"\n        \u8fd4\u56dex\u7684\u7b26\u53f7\n        Args:\n            x:\n\n        Returns:\n            0, 1, -1\n        \"\"\"\n        if x &lt; 0:\n            return -1\n        if x &gt; 0:\n            return 1\n        return 0\n\n    @staticmethod\n    def find(objs: list | tuple, filter_fn: list | tuple | set | callable) -&gt; object:\n        \"\"\"\n        Find the first object that satisfies the condition\n\n        Args:\n            objs: list | tuple (X) \u5f85\u67e5\u627e\u7684\u5bf9\u8c61\u5217\u8868\n            filter_fn: list | tuple | set | callable (X) \u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            object\n        \"\"\"\n        for obj in objs:\n            if filter_fn(obj):\n                return obj\n        return None\n\n    @staticmethod\n    def filter(objs: list | tuple, filter_fn: list | tuple | set | callable) -&gt; list:\n        \"\"\"\n        Returns a list of objects that satisfy the condition\n\n        Args:\n            objs: list | tuple (X) \u5f85\u67e5\u627e\u7684\u5bf9\u8c61\u5217\u8868\n            filter_fn: list | tuple | set | callable (X) \u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list\n        \"\"\"\n        return list(filter(filter_fn, objs))\n\n    @staticmethod\n    def classname(game_object: GameObject) -&gt; str:\n        \"\"\"\n        \u83b7\u53d6\u6e38\u620f\u76f8\u5173\u7684js\u5bf9\u8c61\u7684\u7c7b\u540d\n        Args:\n            game_object: GameObject (X) \u6e38\u620f\u5bf9\u8c61\n\n        Returns:\n            str\n        \"\"\"\n        # __pragma__('js', \"if (game_object instanceof Creep) return 'Creep';\")\n        # __pragma__('js', \"if (game_object instanceof Structure) {\")\n        # __pragma__('js', \"    if (game_object instanceof StructureSpawn) return 'Spawn';\")\n        # __pragma__('js', \"    if (game_object instanceof StructureExtension) return 'Extension';\")\n        # __pragma__('js', \"    if (game_object instanceof StructureRoad) return 'Road';\")\n        # __pragma__('js', \"    if (game_object instanceof StructureWall) return 'Wall';\")\n        # __pragma__('js', \"    if (game_object instanceof StructureRampart) return 'Rampart';\")\n        # __pragma__('js', \"    if (game_object instanceof StructureTower) return 'Tower';\")\n        # __pragma__('js', \"    return 'Structure';\")\n        # __pragma__('js', \"}\")\n        # __pragma__('js', \"if (game_object instanceof Source) return 'Source';\")\n        # __pragma__('js', \"if (game_object instanceof Flag) return 'Flag';\")\n        # __pragma__('js', \"if (game_object instanceof ConstructionSite) return 'Site';\")\n        # __pragma__('js', \"if (game_object instanceof Resource) return 'Resource';\")\n        # __pragma__('js', \"if (game_object instanceof GameObject) return 'GameObject';\")\n        # __pragma__('js', \"return 'Object';\")\n        pass\n\n    @staticmethod\n    def terrain(x_or_point: int | st.point, y: None | int = None) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u6307\u5b9a\u4f4d\u7f6e\u7684\u5730\u5f62\n\n        Args:\n            x_or_point: int| st.point (X) x\u5750\u6807\u6216\u8005\u5750\u6807\u70b9\n            y: None|int (X) y\u5750\u6807\u3002 \u5982\u679c\u4f20\u5165\u4e86y\u5750\u6807\uff0c\u90a3\u4e48\u671f\u671b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570x\u4e3aint\u7c7b\u578b\n\n        Returns:\n            int \u5730\u5f62\u5e38\u91cf\n        \"\"\"\n        return getTerrainAt(Position(x_or_point, y)) if y else getTerrainAt(x_or_point)\n\n    @staticmethod\n    def all(p_type: type, filter_fn: list | tuple | set | callable | None = None) -&gt; list:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6307\u5b9a\u7c7b\u578b\u3001\u6307\u5b9a\u6761\u4ef6\u7684\u6240\u6709\u5bf9\u8c61\n\n        Args:\n            p_type: type (X) \u5bf9\u8c61\u7684\u7c7b\u578b\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        objs = list(getObjectsByPrototype(p_type))\n        if p_type == Creep:  # \u8fc7\u6ee4\u6389\u8fd8\u6ca1\u51c6\u5907\u597d\u7684Creep\n            tmp, now_ticks = [], get.ticks()\n            for obj in objs:\n                if not obj.birth_date or (obj.my and obj.birth_date &lt;= now_ticks):\n                    tmp.append(obj)\n            # __pragma__(\"js\", \"objs = tmp;\")\n        if filter_fn:\n            if isinstance(filter_fn, (list, tuple, set)):\n                filter_fn = std.combo_filter(filter_fn)\n            _ = filter(filter_fn, objs)\n            return _\n        return objs\n\n    @staticmethod\n    def one(p_type: type, filter_fn: list | tuple | set | callable | None = None) -&gt; object | None:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6307\u5b9a\u7c7b\u578b\u3001\u6307\u5b9a\u6761\u4ef6\u7684\u4e00\u4e2a\u5bf9\u8c61\n\n        Args:\n            p_type: type (X) \u5bf9\u8c61\u7684\u7c7b\u578b\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            object | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        objs = get.all(p_type, filter_fn)\n        return objs[0] if objs else None\n\n    @staticmethod\n    def creeps(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Creep]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Creep\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Creep, filter_fn)\n\n    @staticmethod\n    def creep(filter_fn: list | tuple | set | callable | None = None) -&gt; Creep | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Creep\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            Creep \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Creep, filter_fn)\n\n    @staticmethod\n    def friends(filter_fn: list | tuple | set | callable | None = None) -&gt; list[GameObject]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u53cb\u65b9\u5bf9\u8c61\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Creep, lambda obj: obj.my and (not filter_fn or filter_fn(obj)))\n\n    @staticmethod\n    def friend(filter_fn: list | tuple | set | callable | None = None) -&gt; GameObject | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u53cb\u65b9\u5bf9\u8c61\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Creep, lambda obj: obj.my and (not filter_fn or filter_fn(obj)))\n\n    @staticmethod\n    def enemies(filter_fn: list | tuple | set | callable | None = None) -&gt; list[GameObject]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u654c\u65b9\u5bf9\u8c61\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Creep, lambda obj: not obj.my and (not filter_fn or filter_fn(obj)))\n\n    @staticmethod\n    def enemy(filter_fn: list | tuple | set | callable | None = None) -&gt; GameObject | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u654c\u65b9\u5bf9\u8c61\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Creep, lambda obj: not obj.my and (not filter_fn or filter_fn(obj)))\n\n    @staticmethod\n    def spawns(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureSpawn]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Spawn\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureSpawn, filter_fn)\n\n    @staticmethod\n    def spawn(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureSpawn | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Spawn\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureSpawn \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureSpawn, filter_fn)\n\n    @staticmethod\n    def structures(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Structure]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Structure\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Structure, filter_fn)\n\n    @staticmethod\n    def structure(filter_fn: list | tuple | set | callable | None = None) -&gt; Structure | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Structure\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            Structure \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Structure, filter_fn)\n\n    @staticmethod\n    def sources(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Source]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Source\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Source, filter_fn)\n\n    @staticmethod\n    def source(filter_fn: list | tuple | set | callable | None = None) -&gt; Source | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Source\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            Source \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Source, filter_fn)\n\n    @staticmethod\n    def sites(filter_fn: list | tuple | set | callable | None = None) -&gt; list[ConstructionSite]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684ConstructionSite\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(ConstructionSite, filter_fn)\n\n    @staticmethod\n    def site(filter_fn: list | tuple | set | callable | None = None) -&gt; ConstructionSite | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684ConstructionSite\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            ConstructionSite \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(ConstructionSite, filter_fn)\n\n    @staticmethod\n    def resources(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Resource]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Resource\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Resource, filter_fn)\n\n    @staticmethod\n    def resource(filter_fn: list | tuple | set | callable | None = None) -&gt; Resource | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Resource\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            Resource \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Resource, filter_fn)\n\n    @staticmethod\n    def towers(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureTower]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Tower\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureTower, filter_fn)\n\n    @staticmethod\n    def tower(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureTower | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Tower\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureTower \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureTower, filter_fn)\n\n    @staticmethod\n    def walls(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureWall]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Wall\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureWall, filter_fn)\n\n    @staticmethod\n    def wall(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureWall | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Wall\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureWall \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureWall, filter_fn)\n\n    @staticmethod\n    def ramparts(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureRampart]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Rampart\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureRampart, filter_fn)\n\n    @staticmethod\n    def rampart(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureRampart | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Rampart\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureRampart \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureRampart, filter_fn)\n\n    @staticmethod\n    def extensions(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureExtension]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Extension\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureExtension, filter_fn)\n\n    @staticmethod\n    def extension(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureExtension | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Extension\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureExtension \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureExtension, filter_fn)\n\n    @staticmethod\n    def boxes(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureContainer]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Container\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureContainer, filter_fn)\n\n    @staticmethod\n    def box(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureContainer | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Container\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureContainer \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureContainer, filter_fn)\n\n    @staticmethod\n    def roads(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureRoad]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Road\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(StructureRoad, filter_fn)\n\n    @staticmethod\n    def road(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureRoad | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Road\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            StructureRoad \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(StructureRoad, filter_fn)\n\n    # --------------------------Arenas---------------------------\n\n    @staticmethod\n    def flags(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Flag]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Flag\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(Flag, filter_fn)\n\n    @staticmethod\n    def flag(filter_fn: list | tuple | set | callable | None = None) -&gt; Flag | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Flag\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            Flag \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(Flag, filter_fn)\n\n    @staticmethod\n    def score_controllers(filter_fn: list | tuple | set | callable | None = None) -&gt; list[ScoreController]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684ScoreController\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(ScoreController, filter_fn)\n\n    @staticmethod\n    def score_controller(filter_fn: list | tuple | set | callable | None = None) -&gt; ScoreController | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684ScoreController\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            ScoreController \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(ScoreController, filter_fn)\n\n    @staticmethod\n    def storages(filter_fn: list | tuple | set | callable | None = None) -&gt; list[GameObject]:\n        \"\"\"\n        \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Storage\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        return get.all(GameObject, lambda obj: st.storable(obj) and filter_fn(obj))\n\n    @staticmethod\n    def storage(filter_fn: list | tuple | set | callable | None = None) -&gt; GameObject | None:\n        \"\"\"\n        \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Storage\n\n        Args:\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        return get.one(GameObject, lambda obj: st.storable(obj) and filter_fn(obj))\n\n    @staticmethod\n    def moved(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u79fb\u52a8\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u79fb\u52a8\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_move == get.ticks() + ticks_offset\n\n    @staticmethod\n    def attacked(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u653b\u51fb\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return (unit.last_attack == get.ticks() + ticks_offset) or (unit.last_ranged == get.ticks() + ticks_offset)\n\n    @staticmethod\n    def meleed(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u8fd1\u6218\u653b\u51fb\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_melee == get.ticks() + ticks_offset\n\n    @staticmethod\n    def ranged(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u8fdc\u7a0b\u653b\u51fb\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_ranged == get.ticks() + ticks_offset\n\n    @staticmethod\n    def healed(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u6cbb\u7597\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u6cbb\u7597\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_heal == get.ticks() + ticks_offset\n\n    @staticmethod\n    def fetched(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u62ff\u53d6\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u62ff\u53d6\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_fetch == get.ticks() + ticks_offset\n\n    @staticmethod\n    def deposited(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u653e\u7f6e\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653e\u7f6e\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_deposit == get.ticks() + ticks_offset\n\n    @staticmethod\n    def built(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u5efa\u9020\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u5efa\u9020\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_build == get.ticks() + ticks_offset\n\n    @staticmethod\n    def intermited(unit: st.creep, ticks_offset: int = 0) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7intermit\u547d\u4ee4\n\n        * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653e\u7f6e\u547d\u4ee4\n\n        Args:\n            unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n        Returns:\n            bool\n        \"\"\"\n        return unit.last_intermit == get.ticks() + ticks_offset\n\n    @staticmethod\n    def closest(obj: st.point, objs: list[st.point], filter_fn: list | tuple | set | callable | None = None) -&gt; st.point | None:\n        \"\"\"\n        \u8fd4\u56de\u8ddd\u79bb\u6700\u8fd1\u7684\u5bf9\u8c61\n\n        Args:\n            obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n            objs: list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            st.point | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n\n        if len(objs) == 0: return None\n        if filter_fn:\n            if isinstance(filter_fn, (list, tuple, set)):\n                filter_fn = std.combo_filter(filter_fn)\n            # __pragma__(\"js\", \"objs = filter(filter_fn, objs)\")\n            pass\n        # __pragma__(\"js\", 'var tmp_list = [];')\n        # __pragma__(\"js\", 'for (var i = 0; i &lt; objs.length; i++)')\n        # __pragma__(\"js\", '\ttmp_list.push(objs[i]);')\n        # __pragma__(\"js\", 'objs = tmp_list;')\n        obj = findClosestByRange(obj, objs)\n        if obj == undefined: return None\n        return obj\n\n    @staticmethod\n    def quickest(obj: st.point, objs: list[st.point], filter_fn: list | tuple | set | callable | None = None) -&gt; st.point | None:\n        \"\"\"\n        \u8fd4\u56de\u79fb\u52a8\u5230\u76ee\u6807\u6240\u9700\u65f6\u95f4\u6700\u77ed\u7684\u5bf9\u8c61\n\n        Args:\n            obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n            objs: list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            st.point | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n        \"\"\"\n        if len(objs) == 0: return None\n        if filter_fn:\n            if isinstance(filter_fn, (list, tuple, set)):\n                filter_fn = std.combo_filter(filter_fn)\n            # __pragma__(\"js\", \"objs = filter(filter_fn, objs)\")\n            pass\n        # __pragma__(\"js\", 'var tmp_list = [];')\n        # __pragma__(\"js\", 'for (var i = 0; i &lt; objs.length; i++)')\n        # __pragma__(\"js\", '\ttmp_list.push(objs[i]);')\n        # __pragma__(\"js\", 'objs = tmp_list;')\n        obj = findClosestByRange(obj, objs)\n        if obj == undefined: return None\n        return obj\n\n    @staticmethod\n    def inrange(obj: st.point, objs: list[st.point], range: int, filter_fn: list | tuple | set | callable | None = None) -&gt; list[st.point]:\n        \"\"\"\n        \u8fd4\u56de\u5728\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5bf9\u8c61\u5217\u8868\n\n        Args:\n            obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n            objs: list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868\n            range: int (X) \u67e5\u627e\u7684\u6700\u5927\u8303\u56f4\u8ddd\u79bb\n            filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n        Returns:\n            list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        if len(objs) == 0: return []\n        if filter_fn:\n            if isinstance(filter_fn, (list, tuple, set)):\n                filter_fn = std.combo_filter(filter_fn)\n            # __pragma__(\"js\", \"objs = filter(filter_fn, objs)\")\n            pass\n        # __pragma__(\"js\", 'var tmp_list = [];')\n        # __pragma__(\"js\", 'for (var i = 0; i &lt; objs.length; i++)')\n        # __pragma__(\"js\", '\ttmp_list.push(objs[i]);')\n        # __pragma__(\"js\", 'objs = tmp_list;')\n        return list(findInRange(obj, objs, range))\n\n    @staticmethod\n    def _cmp(value, cmp: str):\n        if cmp:\n            if cmp[0] == '=':\n                return value == int(cmp[1:])\n            if cmp[0] == '&gt;':\n                return value &gt; int(cmp[1:])\n            if cmp[0] == '&lt;':\n                return value &lt; int(cmp[1:])\n        return value\n\n    @staticmethod\n    def energy(target: st.storable, percent: bool = False, cmp: str = None) -&gt; int | bool:\n        \"\"\"\n        \u83b7\u53d6\u76ee\u6807\u7684\u80fd\u91cf\u503c\n\n        Args:\n            target: st.storable (X) \u4e00\u4e2a\u53ef\u5b58\u50a8\u8d44\u6e90\u7684\u6e38\u620f\u5bf9\u8c61\n            percent: bool (X) \u662f\u5426\u8fd4\u56de\u767e\u5206\u6bd4\n            cmp: str (X) \u4fbf\u6377\u6bd4\u8f83\u8868\u8fbe\u5f0f\uff0c\u5982'&gt;100', '&lt;50', '=0' (\u6ca1\u6709&lt;= &gt;=)\n\n        Returns:\n            int | bool \u6ca1\u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u5982\u679cpercent\u4e3aTrue\uff0c\u8fd4\u56de\u767e\u5206\u6bd4[0, 100]\uff0c\u5426\u5219\u8fd4\u56de\u5177\u4f53\u80fd\u91cf\u503cint; \u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679cbool\n\n        \"\"\"\n        if target is None or not target.store: return -1\n\n        current = target.store.getUsedCapacity(RESOURCE_ENERGY)\n        if current is None: return -1\n        value = current\n        if percent:\n            total = target.store.getCapacity(RESOURCE_ENERGY)\n            if total is None: return -1\n            # __pragma__('js', 'value = int(current / total * 100 + 0.5)')\n        return get._cmp(value, cmp) if cmp else value\n\n    @staticmethod\n    def health(target: st.hitable, percent: bool = False, cmp: str = None) -&gt; int | bool:\n        \"\"\"\n        \u83b7\u53d6\u76ee\u6807\u7684\u751f\u547d\u503c\n\n        Args:\n            target: st.hitable (X) \u4e00\u4e2a\u53ef\u88ab\u653b\u51fb\u7684\u6e38\u620f\u5bf9\u8c61\n            percent: bool (X) \u662f\u5426\u8fd4\u56de\u767e\u5206\u6bd4\n            cmp: str (X) \u4fbf\u6377\u6bd4\u8f83\u8868\u8fbe\u5f0f\uff0c\u5982'&gt;100', '&lt;50', '=0' (\u6ca1\u6709&lt;= &gt;=)\n\n        Returns:\n            int | bool \u6ca1\u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u5982\u679cpercent\u4e3aTrue\uff0c\u8fd4\u56de\u767e\u5206\u6bd4[0, 100]\uff0c\u5426\u5219\u8fd4\u56de\u5177\u4f53\u751f\u547d\u503cint; \u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679cbool\n        \"\"\"\n        if target is None: return 0\n        if target.hits == undefined: return 0\n        current = target.hits\n        value = current\n        if percent:\n            if target.hitsMax == undefined: return 0\n            total = target.hitsMax\n            # __pragma__('js', 'value = int(current / total * 100 + 0.5)')\n        return get._cmp(value, cmp) if cmp else value\n\n    @staticmethod\n    def parts(creep: st.creep) -&gt; list[str]:\n        \"\"\"\n        \u83b7\u53d6creep\u7684parts\u4fe1\u606f\n\n        Args:\n            creep: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n\n        Returns:\n            list[str]  \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u76ee\u6807creep\u7684\u6240\u6709\u90e8\u4ef6(\u5b57\u7b26\u4e32\u5f62\u5f0f). \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n        \"\"\"\n        if not creep or not creep.body: return []\n        return [part.type for part in creep.body]\n\n    @staticmethod\n    def pcount(creep: st.creep, part_type: str, broken: bool = True) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6creep\u7684body\u4e2d\u6307\u5b9a\u7c7b\u578b\u7684\u90e8\u4ef6\u6570\u91cf\n\n        Args:\n            creep: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n            part_type: str (X) \u90e8\u4ef6\u7c7b\u578b, \u5982MOVE, CARRY, ATTACK, WORK, RANGED_ATTACK \u7b49\n            broken: bool (X) \u662f\u5426\u5305\u542b\u5b8c\u5168\u635f\u574f\u7684\u90e8\u4ef6. False\u65f6\u53ef\u4ee5\u5ffd\u7565hit = 0\u7684\u90e8\u4ef6\n\n        Returns:\n            int  \u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u7684\u90e8\u4ef6\u6570\u91cf. \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de-1\n\n        \"\"\"\n        if not creep or not creep.body: return -1\n        count = 0\n        for part in creep.body:\n            if part.type == part_type:\n                if broken or part.hits &gt; 0:\n                    count += 1\n        return count\n\n    @staticmethod\n    def wait(creep: st.creep) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u76ee\u6807creep\u9700\u8981\u7b49\u5f85\u591a\u5c11tick\u540e\u624d\u80fd\u8fdb\u884c\u79fb\u52a8\n\n        Args:\n            creep: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n\n        Returns:\n            int  \u8fd4\u56de\u7b49\u5f85\u7684tick\u6570. \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de-1. \u5982\u679c\u76ee\u6807\u65e0\u6cd5\u79fb\u52a8\uff0c\u8fd4\u56de0xffff\n        \"\"\"\n        move_count = get.pcount(creep, MOVE, False)\n        if move_count == -1: return -1\n        if move_count == 0: return 0xffff\n        fatigue = creep.fatigue\n\n        if fatigue &lt;= 0: return 0\n        return Math.ceil(fatigue / 2 / move_count)\n\n    @staticmethod\n    def offset(pos: st.point, dx: float, dy: float) -&gt; st.point:\n        \"\"\"\n        \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u70b9\uff0c\u4f4d\u79fbdx, dy\n\n        Args:\n            pos: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n            dx: float (X) x\u8f74\u4f4d\u79fb, \u5355\u4f4d\u4e3a\u65b9\u5757\n            dy: float (X) y\u8f74\u4f4d\u79fb, \u5355\u4f4d\u4e3a\u65b9\u5757\n\n        Returns:\n            st.point  \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u70b9\n        \"\"\"\n        return Position(pos.x + dx, pos.y + dy)\n</code></pre>"},{"location":"src/std/#src.std.get.byid","title":"<code>byid: GameObject = getObjectById</code>  <code>class-attribute</code> <code>instance-attribute</code> <code>staticmethod</code>","text":"<p>\u901a\u8fc7id\u83b7\u53d6\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <p>str (X) \u5bf9\u8c61\u7684id</p> required <p>Returns:</p> Type Description <code>GameObject</code> <p>GameObject</p>"},{"location":"src/std/#src.std.get.cpu_time","title":"<code>cpu_time: int = getCpuTime</code>  <code>class-attribute</code> <code>instance-attribute</code> <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6e38\u620f\u5f53\u524dtick\u6d88\u8017\u7684cpu\u65f6\u95f4(us)</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p>"},{"location":"src/std/#src.std.get.heap","title":"<code>heap: HeapInfo = getHeapStatistics</code>  <code>class-attribute</code> <code>instance-attribute</code> <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u6e38\u620f\u5185\u5b58\u4f7f\u7528\u60c5\u51b5</p> <p>Returns:</p> Type Description <code>HeapInfo</code> <p>HeapInfo  \u5177\u4f53\u5c5e\u6027\u8be6\u89c1Arena\u7684HeapInfo\u7c7b\u578b</p>"},{"location":"src/std/#src.std.get.ticks","title":"<code>ticks: int = getTicks</code>  <code>class-attribute</code> <code>instance-attribute</code> <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u6e38\u620ftick\u6570</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p>"},{"location":"src/std/#src.std.get.all","title":"<code>all(p_type, filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6307\u5b9a\u7c7b\u578b\u3001\u6307\u5b9a\u6761\u4ef6\u7684\u6240\u6709\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>p_type</code> <code>type</code> <p>type (X) \u5bf9\u8c61\u7684\u7c7b\u578b</p> required <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef all(p_type: type, filter_fn: list | tuple | set | callable | None = None) -&gt; list:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6307\u5b9a\u7c7b\u578b\u3001\u6307\u5b9a\u6761\u4ef6\u7684\u6240\u6709\u5bf9\u8c61\n\n    Args:\n        p_type: type (X) \u5bf9\u8c61\u7684\u7c7b\u578b\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    objs = list(getObjectsByPrototype(p_type))\n    if p_type == Creep:  # \u8fc7\u6ee4\u6389\u8fd8\u6ca1\u51c6\u5907\u597d\u7684Creep\n        tmp, now_ticks = [], get.ticks()\n        for obj in objs:\n            if not obj.birth_date or (obj.my and obj.birth_date &lt;= now_ticks):\n                tmp.append(obj)\n        # __pragma__(\"js\", \"objs = tmp;\")\n    if filter_fn:\n        if isinstance(filter_fn, (list, tuple, set)):\n            filter_fn = std.combo_filter(filter_fn)\n        _ = filter(filter_fn, objs)\n        return _\n    return objs\n</code></pre>"},{"location":"src/std/#src.std.get.attacked","title":"<code>attacked(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u653b\u51fb\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef attacked(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u653b\u51fb\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return (unit.last_attack == get.ticks() + ticks_offset) or (unit.last_ranged == get.ticks() + ticks_offset)\n</code></pre>"},{"location":"src/std/#src.std.get.box","title":"<code>box(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Container</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureContainer | None</code> <p>StructureContainer \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef box(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureContainer | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Container\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureContainer \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureContainer, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.boxes","title":"<code>boxes(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Container</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureContainer]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef boxes(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureContainer]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Container\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureContainer, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.built","title":"<code>built(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u5efa\u9020\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u5efa\u9020\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef built(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u5efa\u9020\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u5efa\u9020\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_build == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.classname","title":"<code>classname(game_object)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6e38\u620f\u76f8\u5173\u7684js\u5bf9\u8c61\u7684\u7c7b\u540d Args:     game_object: GameObject (X) \u6e38\u620f\u5bf9\u8c61</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef classname(game_object: GameObject) -&gt; str:\n    \"\"\"\n    \u83b7\u53d6\u6e38\u620f\u76f8\u5173\u7684js\u5bf9\u8c61\u7684\u7c7b\u540d\n    Args:\n        game_object: GameObject (X) \u6e38\u620f\u5bf9\u8c61\n\n    Returns:\n        str\n    \"\"\"\n    # __pragma__('js', \"if (game_object instanceof Creep) return 'Creep';\")\n    # __pragma__('js', \"if (game_object instanceof Structure) {\")\n    # __pragma__('js', \"    if (game_object instanceof StructureSpawn) return 'Spawn';\")\n    # __pragma__('js', \"    if (game_object instanceof StructureExtension) return 'Extension';\")\n    # __pragma__('js', \"    if (game_object instanceof StructureRoad) return 'Road';\")\n    # __pragma__('js', \"    if (game_object instanceof StructureWall) return 'Wall';\")\n    # __pragma__('js', \"    if (game_object instanceof StructureRampart) return 'Rampart';\")\n    # __pragma__('js', \"    if (game_object instanceof StructureTower) return 'Tower';\")\n    # __pragma__('js', \"    return 'Structure';\")\n    # __pragma__('js', \"}\")\n    # __pragma__('js', \"if (game_object instanceof Source) return 'Source';\")\n    # __pragma__('js', \"if (game_object instanceof Flag) return 'Flag';\")\n    # __pragma__('js', \"if (game_object instanceof ConstructionSite) return 'Site';\")\n    # __pragma__('js', \"if (game_object instanceof Resource) return 'Resource';\")\n    # __pragma__('js', \"if (game_object instanceof GameObject) return 'GameObject';\")\n    # __pragma__('js', \"return 'Object';\")\n    pass\n</code></pre>"},{"location":"src/std/#src.std.get.closest","title":"<code>closest(obj, objs, filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u8fd4\u56de\u8ddd\u79bb\u6700\u8fd1\u7684\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>point</code> <p>st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9</p> required <code>objs</code> <code>list[point]</code> <p>list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868</p> required <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>point | None</code> <p>st.point | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef closest(obj: st.point, objs: list[st.point], filter_fn: list | tuple | set | callable | None = None) -&gt; st.point | None:\n    \"\"\"\n    \u8fd4\u56de\u8ddd\u79bb\u6700\u8fd1\u7684\u5bf9\u8c61\n\n    Args:\n        obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n        objs: list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        st.point | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n\n    if len(objs) == 0: return None\n    if filter_fn:\n        if isinstance(filter_fn, (list, tuple, set)):\n            filter_fn = std.combo_filter(filter_fn)\n        # __pragma__(\"js\", \"objs = filter(filter_fn, objs)\")\n        pass\n    # __pragma__(\"js\", 'var tmp_list = [];')\n    # __pragma__(\"js\", 'for (var i = 0; i &lt; objs.length; i++)')\n    # __pragma__(\"js\", '\ttmp_list.push(objs[i]);')\n    # __pragma__(\"js\", 'objs = tmp_list;')\n    obj = findClosestByRange(obj, objs)\n    if obj == undefined: return None\n    return obj\n</code></pre>"},{"location":"src/std/#src.std.get.creep","title":"<code>creep(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Creep</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>Creep | None</code> <p>Creep \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef creep(filter_fn: list | tuple | set | callable | None = None) -&gt; Creep | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Creep\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        Creep \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Creep, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.creeps","title":"<code>creeps(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Creep</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Creep]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef creeps(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Creep]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Creep\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Creep, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.deposited","title":"<code>deposited(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u653e\u7f6e\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653e\u7f6e\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef deposited(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u653e\u7f6e\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653e\u7f6e\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_deposit == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.distance","title":"<code>distance(obj, target)</code>  <code>staticmethod</code>","text":"<p>\u8fd4\u56deobj\u5230\u76ee\u6807\u7684\u8ddd\u79bb(\u5355\u4f4d: \u65b9\u5757\u6570)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>point</code> <p>st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9</p> required <code>target</code> <code>point</code> <p>st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef distance(obj: st.point, target: st.point) -&gt; int:\n    \"\"\"\n    \u8fd4\u56deobj\u5230\u76ee\u6807\u7684\u8ddd\u79bb(\u5355\u4f4d: \u65b9\u5757\u6570)\n\n    Args:\n        obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n        target: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n\n    Returns:\n        int\n    \"\"\"\n    if target is None:\n        print('get.distance: target is None. Return 65535')\n        return 0xffff\n    return obj.getRangeTo(target)\n</code></pre>"},{"location":"src/std/#src.std.get.enemies","title":"<code>enemies(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u654c\u65b9\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[GameObject]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef enemies(filter_fn: list | tuple | set | callable | None = None) -&gt; list[GameObject]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u654c\u65b9\u5bf9\u8c61\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Creep, lambda obj: not obj.my and (not filter_fn or filter_fn(obj)))\n</code></pre>"},{"location":"src/std/#src.std.get.enemy","title":"<code>enemy(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u654c\u65b9\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>GameObject | None</code> <p>GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef enemy(filter_fn: list | tuple | set | callable | None = None) -&gt; GameObject | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u654c\u65b9\u5bf9\u8c61\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Creep, lambda obj: not obj.my and (not filter_fn or filter_fn(obj)))\n</code></pre>"},{"location":"src/std/#src.std.get.energy","title":"<code>energy(target, percent=False, cmp=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u76ee\u6807\u7684\u80fd\u91cf\u503c</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>storable</code> <p>st.storable (X) \u4e00\u4e2a\u53ef\u5b58\u50a8\u8d44\u6e90\u7684\u6e38\u620f\u5bf9\u8c61</p> required <code>percent</code> <code>bool</code> <p>bool (X) \u662f\u5426\u8fd4\u56de\u767e\u5206\u6bd4</p> <code>False</code> <code>cmp</code> <code>str</code> <p>str (X) \u4fbf\u6377\u6bd4\u8f83\u8868\u8fbe\u5f0f\uff0c\u5982'&gt;100', '&lt;50', '=0' (\u6ca1\u6709&lt;= &gt;=)</p> <code>None</code> <p>Returns:</p> Type Description <code>int | bool</code> <p>int | bool \u6ca1\u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u5982\u679cpercent\u4e3aTrue\uff0c\u8fd4\u56de\u767e\u5206\u6bd4[0, 100]\uff0c\u5426\u5219\u8fd4\u56de\u5177\u4f53\u80fd\u91cf\u503cint; \u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679cbool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef energy(target: st.storable, percent: bool = False, cmp: str = None) -&gt; int | bool:\n    \"\"\"\n    \u83b7\u53d6\u76ee\u6807\u7684\u80fd\u91cf\u503c\n\n    Args:\n        target: st.storable (X) \u4e00\u4e2a\u53ef\u5b58\u50a8\u8d44\u6e90\u7684\u6e38\u620f\u5bf9\u8c61\n        percent: bool (X) \u662f\u5426\u8fd4\u56de\u767e\u5206\u6bd4\n        cmp: str (X) \u4fbf\u6377\u6bd4\u8f83\u8868\u8fbe\u5f0f\uff0c\u5982'&gt;100', '&lt;50', '=0' (\u6ca1\u6709&lt;= &gt;=)\n\n    Returns:\n        int | bool \u6ca1\u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u5982\u679cpercent\u4e3aTrue\uff0c\u8fd4\u56de\u767e\u5206\u6bd4[0, 100]\uff0c\u5426\u5219\u8fd4\u56de\u5177\u4f53\u80fd\u91cf\u503cint; \u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679cbool\n\n    \"\"\"\n    if target is None or not target.store: return -1\n\n    current = target.store.getUsedCapacity(RESOURCE_ENERGY)\n    if current is None: return -1\n    value = current\n    if percent:\n        total = target.store.getCapacity(RESOURCE_ENERGY)\n        if total is None: return -1\n        # __pragma__('js', 'value = int(current / total * 100 + 0.5)')\n    return get._cmp(value, cmp) if cmp else value\n</code></pre>"},{"location":"src/std/#src.std.get.extension","title":"<code>extension(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Extension</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureExtension | None</code> <p>StructureExtension \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef extension(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureExtension | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Extension\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureExtension \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureExtension, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.extensions","title":"<code>extensions(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Extension</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureExtension]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef extensions(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureExtension]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Extension\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureExtension, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.fetched","title":"<code>fetched(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u62ff\u53d6\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u62ff\u53d6\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef fetched(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u62ff\u53d6\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u62ff\u53d6\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_fetch == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.filter","title":"<code>filter(objs, filter_fn)</code>  <code>staticmethod</code>","text":"<p>Returns a list of objects that satisfy the condition</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>list | tuple</code> <p>list | tuple (X) \u5f85\u67e5\u627e\u7684\u5bf9\u8c61\u5217\u8868</p> required <code>filter_fn</code> <code>list | tuple | set | callable</code> <p>list | tuple | set | callable (X) \u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> required <p>Returns:</p> Type Description <code>list</code> <p>list</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef filter(objs: list | tuple, filter_fn: list | tuple | set | callable) -&gt; list:\n    \"\"\"\n    Returns a list of objects that satisfy the condition\n\n    Args:\n        objs: list | tuple (X) \u5f85\u67e5\u627e\u7684\u5bf9\u8c61\u5217\u8868\n        filter_fn: list | tuple | set | callable (X) \u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list\n    \"\"\"\n    return list(filter(filter_fn, objs))\n</code></pre>"},{"location":"src/std/#src.std.get.find","title":"<code>find(objs, filter_fn)</code>  <code>staticmethod</code>","text":"<p>Find the first object that satisfies the condition</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>list | tuple</code> <p>list | tuple (X) \u5f85\u67e5\u627e\u7684\u5bf9\u8c61\u5217\u8868</p> required <code>filter_fn</code> <code>list | tuple | set | callable</code> <p>list | tuple | set | callable (X) \u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> required <p>Returns:</p> Type Description <code>object</code> <p>object</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef find(objs: list | tuple, filter_fn: list | tuple | set | callable) -&gt; object:\n    \"\"\"\n    Find the first object that satisfies the condition\n\n    Args:\n        objs: list | tuple (X) \u5f85\u67e5\u627e\u7684\u5bf9\u8c61\u5217\u8868\n        filter_fn: list | tuple | set | callable (X) \u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        object\n    \"\"\"\n    for obj in objs:\n        if filter_fn(obj):\n            return obj\n    return None\n</code></pre>"},{"location":"src/std/#src.std.get.flag","title":"<code>flag(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Flag</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>Flag | None</code> <p>Flag \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef flag(filter_fn: list | tuple | set | callable | None = None) -&gt; Flag | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Flag\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        Flag \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Flag, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.flags","title":"<code>flags(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Flag</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Flag]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef flags(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Flag]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Flag\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Flag, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.friend","title":"<code>friend(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u53cb\u65b9\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>GameObject | None</code> <p>GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef friend(filter_fn: list | tuple | set | callable | None = None) -&gt; GameObject | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u53cb\u65b9\u5bf9\u8c61\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Creep, lambda obj: obj.my and (not filter_fn or filter_fn(obj)))\n</code></pre>"},{"location":"src/std/#src.std.get.friends","title":"<code>friends(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u53cb\u65b9\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[GameObject]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef friends(filter_fn: list | tuple | set | callable | None = None) -&gt; list[GameObject]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u53cb\u65b9\u5bf9\u8c61\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Creep, lambda obj: obj.my and (not filter_fn or filter_fn(obj)))\n</code></pre>"},{"location":"src/std/#src.std.get.healed","title":"<code>healed(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u6cbb\u7597\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u6cbb\u7597\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef healed(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u6cbb\u7597\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u6cbb\u7597\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_heal == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.health","title":"<code>health(target, percent=False, cmp=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u76ee\u6807\u7684\u751f\u547d\u503c</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>hitable</code> <p>st.hitable (X) \u4e00\u4e2a\u53ef\u88ab\u653b\u51fb\u7684\u6e38\u620f\u5bf9\u8c61</p> required <code>percent</code> <code>bool</code> <p>bool (X) \u662f\u5426\u8fd4\u56de\u767e\u5206\u6bd4</p> <code>False</code> <code>cmp</code> <code>str</code> <p>str (X) \u4fbf\u6377\u6bd4\u8f83\u8868\u8fbe\u5f0f\uff0c\u5982'&gt;100', '&lt;50', '=0' (\u6ca1\u6709&lt;= &gt;=)</p> <code>None</code> <p>Returns:</p> Type Description <code>int | bool</code> <p>int | bool \u6ca1\u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u5982\u679cpercent\u4e3aTrue\uff0c\u8fd4\u56de\u767e\u5206\u6bd4[0, 100]\uff0c\u5426\u5219\u8fd4\u56de\u5177\u4f53\u751f\u547d\u503cint; \u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679cbool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef health(target: st.hitable, percent: bool = False, cmp: str = None) -&gt; int | bool:\n    \"\"\"\n    \u83b7\u53d6\u76ee\u6807\u7684\u751f\u547d\u503c\n\n    Args:\n        target: st.hitable (X) \u4e00\u4e2a\u53ef\u88ab\u653b\u51fb\u7684\u6e38\u620f\u5bf9\u8c61\n        percent: bool (X) \u662f\u5426\u8fd4\u56de\u767e\u5206\u6bd4\n        cmp: str (X) \u4fbf\u6377\u6bd4\u8f83\u8868\u8fbe\u5f0f\uff0c\u5982'&gt;100', '&lt;50', '=0' (\u6ca1\u6709&lt;= &gt;=)\n\n    Returns:\n        int | bool \u6ca1\u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u5982\u679cpercent\u4e3aTrue\uff0c\u8fd4\u56de\u767e\u5206\u6bd4[0, 100]\uff0c\u5426\u5219\u8fd4\u56de\u5177\u4f53\u751f\u547d\u503cint; \u6709cmp\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679cbool\n    \"\"\"\n    if target is None: return 0\n    if target.hits == undefined: return 0\n    current = target.hits\n    value = current\n    if percent:\n        if target.hitsMax == undefined: return 0\n        total = target.hitsMax\n        # __pragma__('js', 'value = int(current / total * 100 + 0.5)')\n    return get._cmp(value, cmp) if cmp else value\n</code></pre>"},{"location":"src/std/#src.std.get.inrange","title":"<code>inrange(obj, objs, range, filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u8fd4\u56de\u5728\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5bf9\u8c61\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>point</code> <p>st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9</p> required <code>objs</code> <code>list[point]</code> <p>list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868</p> required <code>range</code> <code>int</code> <p>int (X) \u67e5\u627e\u7684\u6700\u5927\u8303\u56f4\u8ddd\u79bb</p> required <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[point]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef inrange(obj: st.point, objs: list[st.point], range: int, filter_fn: list | tuple | set | callable | None = None) -&gt; list[st.point]:\n    \"\"\"\n    \u8fd4\u56de\u5728\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5bf9\u8c61\u5217\u8868\n\n    Args:\n        obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n        objs: list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868\n        range: int (X) \u67e5\u627e\u7684\u6700\u5927\u8303\u56f4\u8ddd\u79bb\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    if len(objs) == 0: return []\n    if filter_fn:\n        if isinstance(filter_fn, (list, tuple, set)):\n            filter_fn = std.combo_filter(filter_fn)\n        # __pragma__(\"js\", \"objs = filter(filter_fn, objs)\")\n        pass\n    # __pragma__(\"js\", 'var tmp_list = [];')\n    # __pragma__(\"js\", 'for (var i = 0; i &lt; objs.length; i++)')\n    # __pragma__(\"js\", '\ttmp_list.push(objs[i]);')\n    # __pragma__(\"js\", 'objs = tmp_list;')\n    return list(findInRange(obj, objs, range))\n</code></pre>"},{"location":"src/std/#src.std.get.intermited","title":"<code>intermited(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7intermit\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653e\u7f6e\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef intermited(unit: st.creep, ticks_offset: int = 0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7intermit\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653e\u7f6e\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_intermit == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.meleed","title":"<code>meleed(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u8fd1\u6218\u653b\u51fb\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef meleed(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u8fd1\u6218\u653b\u51fb\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_melee == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.moved","title":"<code>moved(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u79fb\u52a8\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u79fb\u52a8\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef moved(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u79fb\u52a8\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u79fb\u52a8\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_move == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.offset","title":"<code>offset(pos, dx, dy)</code>  <code>staticmethod</code>","text":"<p>\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u70b9\uff0c\u4f4d\u79fbdx, dy</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>point</code> <p>st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9</p> required <code>dx</code> <code>float</code> <p>float (X) x\u8f74\u4f4d\u79fb, \u5355\u4f4d\u4e3a\u65b9\u5757</p> required <code>dy</code> <code>float</code> <p>float (X) y\u8f74\u4f4d\u79fb, \u5355\u4f4d\u4e3a\u65b9\u5757</p> required <p>Returns:</p> Type Description <code>point</code> <p>st.point  \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u70b9</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef offset(pos: st.point, dx: float, dy: float) -&gt; st.point:\n    \"\"\"\n    \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u70b9\uff0c\u4f4d\u79fbdx, dy\n\n    Args:\n        pos: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n        dx: float (X) x\u8f74\u4f4d\u79fb, \u5355\u4f4d\u4e3a\u65b9\u5757\n        dy: float (X) y\u8f74\u4f4d\u79fb, \u5355\u4f4d\u4e3a\u65b9\u5757\n\n    Returns:\n        st.point  \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5750\u6807\u70b9\n    \"\"\"\n    return Position(pos.x + dx, pos.y + dy)\n</code></pre>"},{"location":"src/std/#src.std.get.one","title":"<code>one(p_type, filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6307\u5b9a\u7c7b\u578b\u3001\u6307\u5b9a\u6761\u4ef6\u7684\u4e00\u4e2a\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>p_type</code> <code>type</code> <p>type (X) \u5bf9\u8c61\u7684\u7c7b\u578b</p> required <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>object | None</code> <p>object | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef one(p_type: type, filter_fn: list | tuple | set | callable | None = None) -&gt; object | None:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6307\u5b9a\u7c7b\u578b\u3001\u6307\u5b9a\u6761\u4ef6\u7684\u4e00\u4e2a\u5bf9\u8c61\n\n    Args:\n        p_type: type (X) \u5bf9\u8c61\u7684\u7c7b\u578b\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        object | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    objs = get.all(p_type, filter_fn)\n    return objs[0] if objs else None\n</code></pre>"},{"location":"src/std/#src.std.get.parts","title":"<code>parts(creep)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6creep\u7684parts\u4fe1\u606f</p> <p>Parameters:</p> Name Type Description Default <code>creep</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]  \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u76ee\u6807creep\u7684\u6240\u6709\u90e8\u4ef6(\u5b57\u7b26\u4e32\u5f62\u5f0f). \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef parts(creep: st.creep) -&gt; list[str]:\n    \"\"\"\n    \u83b7\u53d6creep\u7684parts\u4fe1\u606f\n\n    Args:\n        creep: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n\n    Returns:\n        list[str]  \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u76ee\u6807creep\u7684\u6240\u6709\u90e8\u4ef6(\u5b57\u7b26\u4e32\u5f62\u5f0f). \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    if not creep or not creep.body: return []\n    return [part.type for part in creep.body]\n</code></pre>"},{"location":"src/std/#src.std.get.pcount","title":"<code>pcount(creep, part_type, broken=True)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6creep\u7684body\u4e2d\u6307\u5b9a\u7c7b\u578b\u7684\u90e8\u4ef6\u6570\u91cf</p> <p>Parameters:</p> Name Type Description Default <code>creep</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>part_type</code> <code>str</code> <p>str (X) \u90e8\u4ef6\u7c7b\u578b, \u5982MOVE, CARRY, ATTACK, WORK, RANGED_ATTACK \u7b49</p> required <code>broken</code> <code>bool</code> <p>bool (X) \u662f\u5426\u5305\u542b\u5b8c\u5168\u635f\u574f\u7684\u90e8\u4ef6. False\u65f6\u53ef\u4ee5\u5ffd\u7565hit = 0\u7684\u90e8\u4ef6</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int  \u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u7684\u90e8\u4ef6\u6570\u91cf. \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de-1</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef pcount(creep: st.creep, part_type: str, broken: bool = True) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6creep\u7684body\u4e2d\u6307\u5b9a\u7c7b\u578b\u7684\u90e8\u4ef6\u6570\u91cf\n\n    Args:\n        creep: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        part_type: str (X) \u90e8\u4ef6\u7c7b\u578b, \u5982MOVE, CARRY, ATTACK, WORK, RANGED_ATTACK \u7b49\n        broken: bool (X) \u662f\u5426\u5305\u542b\u5b8c\u5168\u635f\u574f\u7684\u90e8\u4ef6. False\u65f6\u53ef\u4ee5\u5ffd\u7565hit = 0\u7684\u90e8\u4ef6\n\n    Returns:\n        int  \u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u7684\u90e8\u4ef6\u6570\u91cf. \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de-1\n\n    \"\"\"\n    if not creep or not creep.body: return -1\n    count = 0\n    for part in creep.body:\n        if part.type == part_type:\n            if broken or part.hits &gt; 0:\n                count += 1\n    return count\n</code></pre>"},{"location":"src/std/#src.std.get.quickest","title":"<code>quickest(obj, objs, filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u8fd4\u56de\u79fb\u52a8\u5230\u76ee\u6807\u6240\u9700\u65f6\u95f4\u6700\u77ed\u7684\u5bf9\u8c61</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>point</code> <p>st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9</p> required <code>objs</code> <code>list[point]</code> <p>list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868</p> required <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>point | None</code> <p>st.point | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef quickest(obj: st.point, objs: list[st.point], filter_fn: list | tuple | set | callable | None = None) -&gt; st.point | None:\n    \"\"\"\n    \u8fd4\u56de\u79fb\u52a8\u5230\u76ee\u6807\u6240\u9700\u65f6\u95f4\u6700\u77ed\u7684\u5bf9\u8c61\n\n    Args:\n        obj: st.point (X) \u4e00\u4e2a\u5750\u6807\u70b9\n        objs: list[st.point] (X) \u4e00\u4e2a\u5750\u6807\u70b9\u5217\u8868\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        st.point | None \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    if len(objs) == 0: return None\n    if filter_fn:\n        if isinstance(filter_fn, (list, tuple, set)):\n            filter_fn = std.combo_filter(filter_fn)\n        # __pragma__(\"js\", \"objs = filter(filter_fn, objs)\")\n        pass\n    # __pragma__(\"js\", 'var tmp_list = [];')\n    # __pragma__(\"js\", 'for (var i = 0; i &lt; objs.length; i++)')\n    # __pragma__(\"js\", '\ttmp_list.push(objs[i]);')\n    # __pragma__(\"js\", 'objs = tmp_list;')\n    obj = findClosestByRange(obj, objs)\n    if obj == undefined: return None\n    return obj\n</code></pre>"},{"location":"src/std/#src.std.get.rampart","title":"<code>rampart(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Rampart</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureRampart | None</code> <p>StructureRampart \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef rampart(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureRampart | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Rampart\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureRampart \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureRampart, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.ramparts","title":"<code>ramparts(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Rampart</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureRampart]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef ramparts(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureRampart]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Rampart\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureRampart, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.ranged","title":"<code>ranged(unit, ticks_offset=0)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u8fdc\u7a0b\u653b\u51fb\u547d\u4ee4</p> <ul> <li>\u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <code>ticks_offset</code> <code>int</code> <p>int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef ranged(unit: st.creep, ticks_offset:int=0) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u5355\u4f4d\u5f53\u524dtick\u662f\u5426\u88ab\u4e0b\u8fbe\u8fc7\u8fdc\u7a0b\u653b\u51fb\u547d\u4ee4\n\n    * \u53ea\u80fd\u5224\u65ad\u7531put\u4e0b\u8fbe\u7684\u653b\u51fb\u547d\u4ee4\n\n    Args:\n        unit: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n        ticks_offset: int (X) \u504f\u79fb\u7684ticks\u6570, \u9ed8\u8ba4\u4e3a0. \u6bd4\u5982\u4f20\u5165-1\u8868\u793a\u4e0a\u4e00tick\n\n    Returns:\n        bool\n    \"\"\"\n    return unit.last_ranged == get.ticks() + ticks_offset\n</code></pre>"},{"location":"src/std/#src.std.get.resource","title":"<code>resource(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Resource</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>Resource | None</code> <p>Resource \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef resource(filter_fn: list | tuple | set | callable | None = None) -&gt; Resource | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Resource\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        Resource \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Resource, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.resources","title":"<code>resources(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Resource</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Resource]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef resources(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Resource]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Resource\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Resource, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.road","title":"<code>road(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Road</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureRoad | None</code> <p>StructureRoad \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef road(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureRoad | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Road\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureRoad \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureRoad, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.roads","title":"<code>roads(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Road</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureRoad]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef roads(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureRoad]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Road\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureRoad, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.score_controller","title":"<code>score_controller(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684ScoreController</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>ScoreController | None</code> <p>ScoreController \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef score_controller(filter_fn: list | tuple | set | callable | None = None) -&gt; ScoreController | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684ScoreController\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        ScoreController \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(ScoreController, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.score_controllers","title":"<code>score_controllers(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684ScoreController</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[ScoreController]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef score_controllers(filter_fn: list | tuple | set | callable | None = None) -&gt; list[ScoreController]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684ScoreController\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(ScoreController, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.sign","title":"<code>sign(x)</code>  <code>staticmethod</code>","text":"<p>\u8fd4\u56dex\u7684\u7b26\u53f7 Args:     x:</p> <p>Returns:</p> Type Description <code>int</code> <p>0, 1, -1</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef sign(x: int) -&gt; int:\n    \"\"\"\n    \u8fd4\u56dex\u7684\u7b26\u53f7\n    Args:\n        x:\n\n    Returns:\n        0, 1, -1\n    \"\"\"\n    if x &lt; 0:\n        return -1\n    if x &gt; 0:\n        return 1\n    return 0\n</code></pre>"},{"location":"src/std/#src.std.get.site","title":"<code>site(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684ConstructionSite</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>ConstructionSite | None</code> <p>ConstructionSite \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef site(filter_fn: list | tuple | set | callable | None = None) -&gt; ConstructionSite | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684ConstructionSite\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        ConstructionSite \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(ConstructionSite, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.sites","title":"<code>sites(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684ConstructionSite</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[ConstructionSite]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef sites(filter_fn: list | tuple | set | callable | None = None) -&gt; list[ConstructionSite]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684ConstructionSite\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(ConstructionSite, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.source","title":"<code>source(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Source</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>Source | None</code> <p>Source \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef source(filter_fn: list | tuple | set | callable | None = None) -&gt; Source | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Source\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        Source \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Source, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.sources","title":"<code>sources(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Source</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Source]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef sources(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Source]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Source\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Source, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.spawn","title":"<code>spawn(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Spawn</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureSpawn | None</code> <p>StructureSpawn \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef spawn(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureSpawn | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Spawn\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureSpawn \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureSpawn, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.spawns","title":"<code>spawns(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Spawn</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureSpawn]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef spawns(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureSpawn]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Spawn\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureSpawn, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.storage","title":"<code>storage(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Storage</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>GameObject | None</code> <p>GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef storage(filter_fn: list | tuple | set | callable | None = None) -&gt; GameObject | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Storage\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        GameObject \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(GameObject, lambda obj: st.storable(obj) and filter_fn(obj))\n</code></pre>"},{"location":"src/std/#src.std.get.storages","title":"<code>storages(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Storage</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[GameObject]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef storages(filter_fn: list | tuple | set | callable | None = None) -&gt; list[GameObject]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Storage\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(GameObject, lambda obj: st.storable(obj) and filter_fn(obj))\n</code></pre>"},{"location":"src/std/#src.std.get.structure","title":"<code>structure(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Structure</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>Structure | None</code> <p>Structure \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef structure(filter_fn: list | tuple | set | callable | None = None) -&gt; Structure | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Structure\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        Structure \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(Structure, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.structures","title":"<code>structures(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Structure</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Structure]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef structures(filter_fn: list | tuple | set | callable | None = None) -&gt; list[Structure]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Structure\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(Structure, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.terrain","title":"<code>terrain(x_or_point, y=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4f4d\u7f6e\u7684\u5730\u5f62</p> <p>Parameters:</p> Name Type Description Default <code>x_or_point</code> <code>int | point</code> <p>int| st.point (X) x\u5750\u6807\u6216\u8005\u5750\u6807\u70b9</p> required <code>y</code> <code>None | int</code> <p>None|int (X) y\u5750\u6807\u3002 \u5982\u679c\u4f20\u5165\u4e86y\u5750\u6807\uff0c\u90a3\u4e48\u671f\u671b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570x\u4e3aint\u7c7b\u578b</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u5730\u5f62\u5e38\u91cf</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef terrain(x_or_point: int | st.point, y: None | int = None) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u4f4d\u7f6e\u7684\u5730\u5f62\n\n    Args:\n        x_or_point: int| st.point (X) x\u5750\u6807\u6216\u8005\u5750\u6807\u70b9\n        y: None|int (X) y\u5750\u6807\u3002 \u5982\u679c\u4f20\u5165\u4e86y\u5750\u6807\uff0c\u90a3\u4e48\u671f\u671b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570x\u4e3aint\u7c7b\u578b\n\n    Returns:\n        int \u5730\u5f62\u5e38\u91cf\n    \"\"\"\n    return getTerrainAt(Position(x_or_point, y)) if y else getTerrainAt(x_or_point)\n</code></pre>"},{"location":"src/std/#src.std.get.tower","title":"<code>tower(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Tower</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureTower | None</code> <p>StructureTower \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef tower(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureTower | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Tower\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureTower \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureTower, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.towers","title":"<code>towers(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Tower</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureTower]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef towers(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureTower]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Tower\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureTower, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.wait","title":"<code>wait(creep)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u76ee\u6807creep\u9700\u8981\u7b49\u5f85\u591a\u5c11tick\u540e\u624d\u80fd\u8fdb\u884c\u79fb\u52a8</p> <p>Parameters:</p> Name Type Description Default <code>creep</code> <code>creep</code> <p>st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61</p> required <p>Returns:</p> Type Description <code>int</code> <p>int  \u8fd4\u56de\u7b49\u5f85\u7684tick\u6570. \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de-1. \u5982\u679c\u76ee\u6807\u65e0\u6cd5\u79fb\u52a8\uff0c\u8fd4\u56de0xffff</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef wait(creep: st.creep) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u76ee\u6807creep\u9700\u8981\u7b49\u5f85\u591a\u5c11tick\u540e\u624d\u80fd\u8fdb\u884c\u79fb\u52a8\n\n    Args:\n        creep: st.creep (X) \u4e00\u4e2aCreep\u5bf9\u8c61\n\n    Returns:\n        int  \u8fd4\u56de\u7b49\u5f85\u7684tick\u6570. \u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8fd4\u56de-1. \u5982\u679c\u76ee\u6807\u65e0\u6cd5\u79fb\u52a8\uff0c\u8fd4\u56de0xffff\n    \"\"\"\n    move_count = get.pcount(creep, MOVE, False)\n    if move_count == -1: return -1\n    if move_count == 0: return 0xffff\n    fatigue = creep.fatigue\n\n    if fatigue &lt;= 0: return 0\n    return Math.ceil(fatigue / 2 / move_count)\n</code></pre>"},{"location":"src/std/#src.std.get.wall","title":"<code>wall(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Wall</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>StructureWall | None</code> <p>StructureWall \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef wall(filter_fn: list | tuple | set | callable | None = None) -&gt; StructureWall | None:\n    \"\"\"\n    \u83b7\u53d6\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684Wall\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        StructureWall \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deNone\n    \"\"\"\n    return get.one(StructureWall, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.get.walls","title":"<code>walls(filter_fn=None)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Wall</p> <p>Parameters:</p> Name Type Description Default <code>filter_fn</code> <code>list | tuple | set | callable | None</code> <p>list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f</p> <code>None</code> <p>Returns:</p> Type Description <code>list[StructureWall]</code> <p>list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef walls(filter_fn: list | tuple | set | callable | None = None) -&gt; list[StructureWall]:\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Wall\n\n    Args:\n        filter_fn: list | tuple | set | callable | None (X) \u6761\u4ef6\u5bb9\u5668\u51fd\u6570\u8868\u8fbe\u5f0f\n\n    Returns:\n        list \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\u5217\u8868\n    \"\"\"\n    return get.all(StructureWall, filter_fn)\n</code></pre>"},{"location":"src/std/#src.std.put","title":"<code>put</code>","text":"<p>\u6807\u51c6\u547d\u4ee4\u8f93\u51fa\u51fd\u6570\u5e93</p> <p>\u683c\u5f0f\u8bf4\u660e(\u4f8b\u5982):</p> <p>unit: st.friend &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d   # '\u5b8c\u5168\u68c0\u67e5'\u65f6\u9700\u8981\u4e3ast.friend &amp; st.movable\uff0c'\u5fc5\u8981\u68c0\u67e5'\u65f6\u9700\u8981\u4e3ast.creep</p> <p>to: st.point | int (ES: X)\u4e00\u4e2a\u76ee\u6807\u70b9\u6216\u662f\u4e00\u4e2a\u65b9\u5411   # '\u5b8c\u5168\u68c0\u67e5'\u65f6\u9700\u8981\u4e3ast.point | int\uff0c'\u5fc5\u8981\u68c0\u67e5'\u65f6\u4e0d\u68c0\u67e5\u8be5\u53c2\u6570</p> <p>options: Options (X) \u5bfb\u8def\u9009\u9879(\u53ea\u5728to\u4e3ast.point\u65f6\u6709\u6548)   # \u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u68c0\u67e5\u8be5\u53c2\u6570\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4f20\u5165\u7684\u53c2\u6570\u662f\u6b63\u786e\u7684</p> <p>__assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5   # \u8be5\u53c2\u6570\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u88ab\u68c0\u67e5</p> Source code in <code>src\\std.py</code> Python<pre><code>class put:\n    \"\"\"\n    \u6807\u51c6\u547d\u4ee4\u8f93\u51fa\u51fd\u6570\u5e93\n\n    \u683c\u5f0f\u8bf4\u660e(\u4f8b\u5982):\n\n\n    unit: st.friend &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d   # '\u5b8c\u5168\u68c0\u67e5'\u65f6\u9700\u8981\u4e3ast.friend &amp; st.movable\uff0c'\u5fc5\u8981\u68c0\u67e5'\u65f6\u9700\u8981\u4e3ast.creep\n\n    to: st.point | int (ES: X)\u4e00\u4e2a\u76ee\u6807\u70b9\u6216\u662f\u4e00\u4e2a\u65b9\u5411   # '\u5b8c\u5168\u68c0\u67e5'\u65f6\u9700\u8981\u4e3ast.point | int\uff0c'\u5fc5\u8981\u68c0\u67e5'\u65f6\u4e0d\u68c0\u67e5\u8be5\u53c2\u6570\n\n    options: Options (X) \u5bfb\u8def\u9009\u9879(\u53ea\u5728to\u4e3ast.point\u65f6\u6709\u6548)   # \u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u68c0\u67e5\u8be5\u53c2\u6570\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4f20\u5165\u7684\u53c2\u6570\u662f\u6b63\u786e\u7684\n\n    __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5   # \u8be5\u53c2\u6570\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e0d\u4f1a\u88ab\u68c0\u67e5\n\n    \"\"\"\n    _spawn_memory = []  # \u7528\u4e8e\u5b58\u50a8spawn\u751f\u4ea7\u4fe1\u606f\u7684memory\n\n    @staticmethod\n    def move(unit: st.friend &amp; st.movable, to: st.point | int, options: Options = None, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4Creep\u79fb\u52a8\u5230\u76ee\u6807\u70b9\u6216\u5411\u67d0\u4e2a\u65b9\u5411\u79fb\u52a8\n\n        Args:\n            unit: st.friend &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n            to: st.point | int (ES: X)\u4e00\u4e2a\u76ee\u6807\u70b9\u6216\u662f\u4e00\u4e2a\u65b9\u5411\n            options: Options (X) \u5bfb\u8def\u9009\u9879(\u53ea\u5728to\u4e3ast.point\u65f6\u6709\u6548)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, to],\n                             ['unit', 'to'],\n                             [combo((st.friend, st.movable)), combo([st.point, st.number])],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE, st.NOT_POINT + ' | ' + st.NOT_NUMBER])\n            # else\n            if to is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        if to.x != undefined and to.y != undefined:  # to is a point:\n            if options:  # \u5bfb\u8def options\n                if unit.path_goal != to:  # \u5982\u679c\u76ee\u6807\u4e0d\u540c\uff0c\u91cd\u65b0\u5bfb\u8def\n                    path_res = searchPath(unit, to, options)\n                    if path_res.incomplete:\n                        print('Can not find a options path to target:', to, \"use default path.\")\n                    else:\n                        # \u4fdd\u7559\u5bf9\u540c\u4e00\u76ee\u6807\u7684\u5bfb\u8def\u7ed3\u679c(\u51cf\u5c11cpu\u6d88\u8017)\n                        unit.path = path_res.path\n                        unit.path_goal = to\n                        unit.path_index = 0\n            if unit.path:\n                to = unit.path[unit.path_index]\n                unit.path_index += 1\n                if unit.path_index &gt;= unit.path.length:\n                    unit.path = None\n                    unit.path_index = 0\n            _ = unit.moveTo(to)\n        else:\n            _ = unit.move(to)\n\n        if _ == OK:  # \u4f5c\u4e3a\u5224\u5b9a\u4f9d\u636e  (get.ticks()\u5e94\u8be5\u6548\u7387\u5f88\u9ad8)\n            unit.last_move = get.ticks()\n\n        return _\n\n    @staticmethod\n    def push(unit: list | (st.friend &amp; st.movable), target: st.friend &amp; st.movable, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u4e00\u4e2a\u6216\u591a\u4e2aCreep\u63a8\u52a8\u76ee\u6807Creep\n        * \u53ef\u4ee5\u8ba9\u591a\u4e2a\u9ad8\u673a\u52a8\u529b\u7684Creep\u5e2e\u52a9\u63a8\u52a8\u4e00\u4e2a\u4f4e\u673a\u52a8\u529b\u7684Creep\u79fb\u52a8(target\u5fc5\u987b\u6b63\u5728\u79fb\u52a8)\n\n        Args:\n            unit: list | (st.friend &amp; st.movable) (ES: st.creep | list) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n            target: st.friend &amp; st.movable (ES: st.creep)\u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo([st.list, (st.friend, st.movable)]), combo((st.friend, st.movable))],\n                             ['obj is not a list | (' + st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE + ')', st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE])\n            # else\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo([st.creep, st.list]), st.creep],\n                             ['obj is not a creep | list', st.NOT_CREEP])\n            # endif\n        # endif\n\n        if isinstance(unit, list):\n            for each in unit:\n                target.pull(each)\n                _ = put.move(each, target, None, False)\n                if _ != OK:\n                    return _\n        else:\n            target.pull(unit)\n            return put.move(unit, target, None, False)\n\n    @staticmethod\n    def attack(unit: st.friend &amp; st.atkable, target: st.enemy &amp; st.hitable, move: bool | Options = True, __assert: bool = True) -&gt; Result:\n        \"\"\"\n        \u547d\u4ee4Tower\u6216Creep\u653b\u51fb\u654c\u65b9\u76ee\u6807\n\n        Args:\n            unit: st.friend &amp; st.atkable (ES: *.attack != undefined) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u653b\u51fb\u5355\u4f4d\uff0c\u4f8b\u5982\uff1a*.attack != undefined\n            target: st.enemy &amp; st.hitable (ES: X) \u4e00\u4e2a\u654c\u65b9\u7684\u53ef\u88ab\u653b\u51fb\u7684\u5355\u4f4d\n            move: bool | Options (X) \u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            Result (\u5982\u679c\u6ca1\u6709\u6267\u884c\u67d0\u6761\u64cd\u4f5c\uff0c\u5219\u4e0d\u5305\u542b\u5bf9\u5e94\u5c5e\u6027)\n\n                .melee: int \u53d1\u52a8\u8fd1\u6218\u653b\u51fb\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n                .ranged: int \u53d1\u52a8\u8fdc\u7a0b\u653b\u51fb\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n                .move: int   \u79fb\u52a8\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.atkable)), combo((st.enemy, st.hitable))],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_ATKABLE, st.NOT_ENEMY + ' &amp; ' + st.NOT_HITABLE])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [lambda obj: obj and obj.attack != undefined],\n                             ['unit do not have .attack method.'])\n            # endif\n        # endif\n\n        # insert if (unit instanceof StructureTower) return {attack: unit.attack(target)};\n\n        # \u83b7\u53d6\u653b\u51fb\u8ddd\u79bb\n        melee, ranged = st.melee(unit), st.ranged(unit)\n        dist = get.distance(unit, target)  # \u83b7\u53d6\u8ddd\u79ae\n        # insert var result = {};\n\n        if dist == 1:\n            if melee:\n                result.melee = unit.attack(target)\n            if ranged:\n                result.ranged = unit.rangedMassAttack()\n\n            if move and not melee and st.atkable(target):  # \u5982\u679c\u654c\u65b9\u5355\u4f4d\u80fd\u653b\u51fb, \u81ea\u8eab\u53c8\u4e0d\u80fd\u8fd1\u6218\u653b\u51fb\n                result.move = put.escape(unit, target, None if move is True else move, False)\n        elif dist &lt;= 3:\n            if ranged:\n                result.ranged = unit.rangedAttack(target)\n                if move and dist &lt;= 2:  # \u5982\u679c\u654c\u65b9\u5355\u4f4d\u662f\u8fd1\u6218\u5355\u4f4d\u5e76\u4e14\u8ddd\u79bb\u4e3a2(\u5c1d\u8bd5\u98ce\u7b5d\u5bf9\u9762)\n                    result.move = put.escape(unit, target, None if move is True else move, False)\n            elif move and melee:\n                result.move = put.move(unit, target, None if move is True else move, False)\n        elif move:\n            result.move = put.move(unit, target, None if move is True else move, False)\n\n        if result.melee == OK:\n            unit.last_melee = get.ticks()\n        if result.ranged == OK:\n            unit.last_ranged = get.ticks()\n\n        return result\n\n    @staticmethod\n    def heal(unit: st.friend &amp; st.healable, target: st.friend &amp; st.creep, move: bool | Options = True, __assert: bool = True) -&gt; Result:\n        \"\"\"\n        \u547d\u4ee4Tower\u6216Creep\u6cbb\u7597\u76ee\u6807\u5355\u4f4d\n\n        Args:\n            unit: st.friend &amp; st.healable (ES: *.heal != undefined) \u4e00\u4e2a\u53cb\u65b9\u7684\u5177\u6709\u6cbb\u7597\u80fd\u529b\u7684\u5355\u4f4d\n            target: st.friend &amp; st.creep (ES: X) \u4e00\u4e2a\u53cb\u65b9\u7684creep\n            move: bool | Options (X) \u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            Result (\u5982\u679c\u6ca1\u6709\u6267\u884c\u67d0\u6761\u64cd\u4f5c\uff0c\u5219\u4e0d\u5305\u542b\u5bf9\u5e94\u5c5e\u6027)\n\n                .heal: int \u8fd1\u8ddd\u79bb\u6cbb\u7597\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n                .ranged: int \u8fdc\u7a0b\u6cbb\u7597\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n                .move: int   \u79fb\u52a8\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n        \"\"\"\n\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.healable)), combo((st.friend, st.creep))],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_HEALABLE, st.NOT_FRIEND + ' &amp; ' + st.NOT_CREEP])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [lambda obj: obj and obj.heal != undefined],\n                             ['unit do not have .heal method.'])\n            # endif\n        # endif\n\n        # insert if (unit instanceof StructureTower) return {heal: unit.heal(target)};\n        # insert var result = {};\n\n        dist = get.distance(unit, target)\n        if dist &lt;= 1:\n            result.heal = unit.heal(target)\n        elif dist &lt;= 3:\n            result.ranged = unit.rangedHeal(target)\n        elif move:\n            result.move = put.move(unit, target, None if move is True else move, False)\n\n        if result.heal == OK or result.ranged == OK:\n            unit.last_heal = get.ticks()\n        return result\n\n    @staticmethod\n    def fetch(unit: st.friend &amp; st.storable, target: st.storable | st.resource, resource_type: int = RESOURCE_ENERGY, amount: int | None = None,\n              move: bool | Options = True,\n              __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u5355\u4f4d\u4ece\u76ee\u6807\u5904\u53d6\u51fa\u8d44\u6e90\n\n        Args:\n            unit: st.friend &amp; st.storable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u5355\u4f4d\n            target: st.storable | st.resource (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\u6216\u6389\u843d\u7684\u8d44\u6e90\n            resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n            amount: int | None (X)\u8d44\u6e90\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u53d6\u51fa\u6240\u6709\u8d44\u6e90\n            move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.storable)), combo([st.storable, st.resource])],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE, st.NOT_STORABLE + ' | ' + st.NOT_RESOURCE])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        if move and get.distance(unit, target) &gt; 1:\n            return put.move(unit, target, None if move is True else move, False)\n\n        # insert if((target instanceof Resource) &amp;&amp; target.resourceType == RESOURCE_ENERGY) return unit.pickup(target);\n\n        unit.last_fetch = get.ticks()\n\n        if amount:\n            # insert if(target instanceof Creep) return target.transfer(unit, resource_type, amount);\n            # insert if(target instanceof Structure) return unit.withdraw(target, resource_type, amount);\n            pass\n        else:\n            # insert if(target instanceof Creep) return target.transfer(unit, resource_type);\n            # insert if(target instanceof Structure) return unit.withdraw(target, resource_type);\n            pass\n        return ERR_INVALID_TARGET\n\n    @staticmethod\n    def deposit(unit: st.friend &amp; st.storable, target: st.storable | None, resource_type: int = RESOURCE_ENERGY, amount: int | None = None,\n                move: bool | Options = True, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u5355\u4f4d\u5c06\u8eab\u4e0a\u7684\u8d44\u6e90\u653e\u7f6e\u4e8e\u76ee\u6807\u5904\n\n        Args:\n            unit: st.friend &amp; st.storable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u5355\u4f4d\n            target: st.storable | None (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\uff0c\u5982\u679c\u4e3aNone\uff0c\u5355\u4f4d\u4f1a\u76f4\u63a5\u4e22\u5f03\u8d44\u6e90\u5230\u539f\u5730\n            resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n            amount: int | None (X)\u8d44\u6e90\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u8f6c\u79fb\u6240\u6709\u8d44\u6e90\n            move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n        Examples:\n            ```python\n            # \u8ba9worker\u91c7\u96c6\u8d44\u6e90\u5e76\u628a\u91c7\u96c6\u5230\u7684\u8d44\u6e90\u8fd0\u56despawn\n            worker = get.friend(lambda obj: obj.name == 'worker')\n            spawn = get.spawn(st.friend)\n            source = get.source()\n            if get.energy(worker, True) == 100:\n                put.deposit(worker, spawn, RESOURCE_ENERGY)\n            else:\n                put.harvest(worker, source)\n            ```\n            ```python\n            # \u8ba9carrier\u4ecebox\u4e0d\u505c\u5730\u53d6\u51fa\u8d44\u6e90\u5e76\u628a\u8d44\u6e90\u4e22\u5728\u5730\u4e0a\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            box = get.closest(carrier, get.boxes())\n            if get.energy(box) &gt; 0:\n                if get.energy(carrier) == 0:\n                    put.fetch(carrier, box, RESOURCE_ENERGY)\n                else:\n                    put.deposit(carrier, None, RESOURCE_ENERGY)\n            ```\n            ```python\n            # \u8ba9carrier\u4ecebox\u53d6\u51fa\u8d44\u6e90\u5e76\u628a\u8d44\u6e90\u9001\u7ed9worker\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            worker = get.friend(lambda obj: obj.name == 'worker')\n            box = get.closest(carrier, get.boxes(combo( {st.empty} )))  # \u6700\u8fd1\u7684\u975e\u7a7abox\n            if get.energy(carrier, True) &gt; 50:  # \u81ea\u8eab\u5e26\u670950%\u4ee5\u4e0a\u7684\u80fd\u91cf\u5c31\u5148\u7ed9worker\n                put.deposit(carrier, worker, RESOURCE_ENERGY)\n            elif box:\n                put.fetch(carrier, box, RESOURCE_ENERGY)\n            ```\n        \"\"\"\n\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.storable)), combo([st.storable, lambda obj: obj is None])],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE, st.NOT_STORABLE + ' | ' + 'obj is not None'])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        unit.last_deposit = get.ticks()\n\n        if target is None:\n            return unit.drop(resource_type, amount)\n\n        if move and get.distance(unit, target) &gt; 1:\n            return put.move(unit, target, None if move is True else move, False)\n\n        if amount:\n            return unit.transfer(target, resource_type, amount)\n        else:\n            return unit.transfer(target, resource_type)\n\n    @staticmethod\n    def build(unit: st.friend &amp; st.workable, site: st.site, move: bool | Options = True, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u5355\u4f4d\u5efa\u9020\u5efa\u7b51\n\n        Args:\n            unit: st.friend &amp; st.workable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u5de5\u4f5c\u5355\u4f4d\n            site: st.site (ES: X)\u4e00\u4e2aConstructionSite\u5b9e\u4f8b\u5bf9\u8c61\n            move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n        \"\"\"\n\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit],\n                             ['unit'],\n                             [combo((st.friend, st.workable))],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_WORKABLE])\n            # else\n            if site is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        unit.last_build = get.ticks()\n\n        if move and get.distance(unit, site) &gt; 3:\n            return put.move(unit, site, None if move is True else move, False)\n        return unit.build(site)\n\n    @staticmethod\n    def harvest(unit: st.friend &amp; st.workable, target: st.source, move: bool | Options = True, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u5355\u4f4d\u91c7\u96c6\u8d44\u6e90\n\n        Args:\n            unit: st.friend &amp; st.workable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u5de5\u4f5c\u5355\u4f4d\n            target: st.source (ES: X)\u4e00\u4e2a\u8d44\u6e90\u70b9\n            move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n        Examples:\n            ```python\n            # \u8ba9worker\u91c7\u96c6\u8d44\u6e90(\u88c5\u6ee1\u4e86\u5c31\u56de\u5bb6\uff0c\u5426\u5219\u5c31\u7ee7\u7eed\u91c7\u96c6)\n            worker = get.friend(lambda obj: obj.name == 'worker')\n            spawn = get.spawn(st.friend)\n            source = get.source()\n            if get.energy(worker, True) == 100:\n                put.deposit(worker, spawn, RESOURCE_ENERGY)\n            else:\n                put.harvest(worker, source)\n            ```\n        \"\"\"\n\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.workable)), st.source],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_WORKABLE, st.NOT_SOURCE])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        unit.last_harvest = get.ticks()\n\n        if move and get.distance(unit, target) &gt; 1:\n            return put.move(unit, target, None if move is True else move, False)\n\n        return unit.harvest(target)\n\n    site = createConstructionSite\n\n    @staticmethod\n    def create(spawn: st.friend &amp; st.spawn, recipe: list[str], name: str | None = None, __assert: bool = True) -&gt; int | object:\n        \"\"\"\n        \u547d\u4ee4spawn\u6309\u7167\u6307\u5b9a\u7684\u914d\u65b9\u751f\u4ea7\u4e00\u4e2acreep\n\n        Args:\n            spawn: st.friend &amp; st.spawn (ES: st.spawn)\u4e00\u4e2a\u53cb\u65b9\u7684Spawn\n            recipe: list[str] (ES: X) \u4e00\u4e2acreep\u7684\u914d\u65b9, \u4e00\u822c\u7528const\u4e0b\u7684MOVE, CARRY, WORK\u7b49\u5e38\u91cf\n            name: str | None (X) \u4e00\u4e2acreep\u7684\u540d\u5b57(\u9ed8\u8ba4\u4e3aNone), \u8fd9\u6837\u521b\u5efa\u7684creep\u4f1a\u5e26\u6709.name\u5c5e\u6027\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int | object \u5982\u679c\u6210\u529f(\u751f\u4ea7\u5b8c\u6210)\uff0c\u8fd4\u56de\u521b\u5efa\u7684creep\u5bf9\u8c61; \u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n        Examples:\n            ```python\n            # \u751f\u6210\u4e00\u4e2a\u540d\u4e3a'worker'\u7684creep\n            spawn = get.spawn(st.friend)\n            worker = get.friend(lambda obj: obj.name == 'worker')\n            if not worker:\n                put.create(spawn, [CARRY, MOVE, WORK], 'worker')\n            ```\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([spawn],\n                             ['spawn'],\n                             [combo((st.spawn, st.friend))],\n                             [st.NOT_SPAWN + ' &amp; ' + st.NOT_FRIEND])\n            # else\n            std.param_assert([spawn],\n                             ['spawn'],\n                             [st.spawn],\n                             [st.NOT_SPAWN])\n            # endif\n        # endif\n\n        ready_index, now_ticks = -1, get.ticks()\n        for i in range(len(put._spawn_memory)):\n            if put._spawn_memory[i].birth_date &lt;= now_ticks:\n                ready_index = i\n                break\n        if ready_index != -1:\n            return put._spawn_memory.pop(ready_index)\n\n        if spawn.lock:\n            if now_ticks &lt;= spawn.lock:\n                return ERR_BUSY\n            spawn.lock = undefined\n\n        # \u5f00\u59cb\u751f\u4ea7\n        info = spawn.spawnCreep(recipe)\n        if info.error:\n            return info.error\n\n        spawn.lock = now_ticks + 2\n        if name: info.object.name = name\n        info.object.birth_date = get.ticks() + CREEP_SPAWN_TIME * len(recipe)\n        put._spawn_memory.append(info.object)\n\n        return ERR_BUSY\n\n    # -------------------------------------- Extension: --------------------------------------\n\n    @staticmethod\n    def escape(unit: st.friend &amp; st.movable, target: st.point, options: Options = None, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4Creep\u8fdc\u79bb\u76ee\u6807\n\n        ! \u4e0d\u662f\u5f88\u597d\u7684\u9003\u79bb\u7b97\u6cd5\uff0c\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9003\u8dd1\u7b97\u6cd5(\u5c1d\u8bd5\u8fc7\u4f20\u5165.flee\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u5de5\u4f5c)\n\n        Args:\n            unit: st.friend, st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n            target: st.point (ES: X)\u76ee\u6807\u70b9\n            options: Options (X) \u5bfb\u8def\u9009\u9879\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n        Examples:\n            ```python\n            # \u8ba9worker\u8fdc\u79bb\u6700\u8fd1\u7684\u654c\u4eba\n            worker = get.friend(lambda obj: obj.name == 'worker')\n            enemy = get.closest(worker, get.enemies())\n            if enemy and get.distance(worker, enemy) &lt;= 8:\n                put.escape(worker, enemy)\n            ```\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.movable)), st.point],\n                             [st.NOT_FRIEND + \" &amp; \" + st.NOT_MOVABLE, st.NOT_POINT])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        pos = Options()\n        pos.x = unit.x + get.sign(unit.x - target.x)\n        pos.y = unit.y + get.sign(unit.y - target.y)\n        if get.terrain(pos) == TERRAIN_WALL:\n            spawn = get.spawn(st.friend)\n            if spawn:\n                return put.move(unit, spawn, options)\n        return put.move(unit, pos, options)\n\n\n    @staticmethod\n    def intermit(unit: st.friend &amp; st.storable &amp; st.movable, target: st.storable, resource_type: int = RESOURCE_ENERGY, options: Options = None,\n                 __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u65ad\u65ad\u7eed\u7eed\u5730\u642c\u8fd0\u8d44\u6e90\u5230\u76ee\u6807\n\n        * \u7279\u522b\u9002\u7528\u4e8e\u7a7a\u8f7d\u548c\u6ee1\u8f7d\u72b6\u6001\u4e0b\u79fb\u52a8\u80fd\u529b\u5dee\u8ddd\u5de8\u5927\u7684\u5355\u4f4d\n\n        Args:\n            unit: st.friend &amp; st.storable &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u79fb\u52a8\u7684\u53ef\u5b58\u50a8\u8d44\u6e90\u7684\u5355\u4f4d\n            target: st.storable (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\n            resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n            options: Options (X) \u5bfb\u8def\u9009\u9879\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u642c\u8fd0\u5b8c\u6bd5\u6216\u662f\u65e0\u8d44\u6e90\u53ef\u642c\u8fd0\uff0c\u8fd4\u56deDONE(1); \u642c\u8fd0\u4e2d\u8fd4\u56deOK(0)\u6216\u662f\u9519\u8bef\u7801(&lt;0)\n\n        Examples:\n            ```python\n            # \u5c06\u8eab\u4e0a\u6216\u5730\u4e0a\u7684\u8d44\u6e90\u642c\u8fd0\u56de\u5bb6(\u786e\u4fdd\u8eab\u4e0a\u6216\u5730\u4e0a\u6709\u8d44\u6e90)\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            spawn = get.spawn(st.friend)\n            put.intermit(carrier, spawn, RESOURCE_ENERGY)\n            ```\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo((st.friend, st.storable, st.movable)), st.storable],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE + ' &amp; ' + st.NOT_MOVABLE, st.NOT_STORABLE])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        drops = get.resources(lambda obj: obj.resourceType == resource_type and get.distance(unit, obj) &lt;= 1)\n        free = unit.store.getFreeCapacity(resource_type)\n        if len(drops) and free &gt; 0:\n            unit.last_intermit = get.ticks()\n            return put.fetch(unit, drops[0], resource_type, free, False, False)  # \u6361\u8d77\u4e1c\u897f\u540e\u8fd9\u4e2a\u56de\u5408\u5c31\u4e0d\u4f1a\u518d\u79fb\u52a8\u4e86\n\n        current = unit.store.getUsedCapacity(resource_type)\n        if current == 0:\n            return DONE\n\n        unit.last_intermit = get.ticks()\n\n        dist = get.distance(unit, target)\n        if dist &lt;= 1:\n            _ = put.deposit(unit, target, resource_type, None, options if options else True, False)\n            if _ != OK:\n                return _\n            return DONE\n        else:\n\n            _ = put.deposit(unit, None, resource_type, None, options if options else True, False)\n            if _ != OK:\n                return _\n            return put.move(unit, target, options, False)\n\n    @staticmethod\n    def follow(unit: list | (st.friend &amp; st.movable), target: st.movable, distance: int | tuple, options: Options = None,\n               move: bool | Options = True, __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u4f4d\u8ddf\u968f\u76ee\u6807(\u53ef\u4ee5\u662f\u5c3e\u968f\uff0cCreep\u795f\u795f)\n\n        * \u8ddf\u968f\u53cb\u65b9\u65f6\uff0cdistance\u4e3a\u8ddd\u79bb\u6700\u5927\u503c\uff0c\u8d85\u51fa\u8ddd\u79bb(\u4e14\u542f\u7528move)\u65f6\u5c06\u547d\u4ee4target\u4e3b\u52a8\u9760\u8fd1unit(\u6216\u6700\u8fdc\u7684unit)\n\n        * \u8ddf\u968f\u654c\u65b9\u65f6\uff0cdistance\u4e3a\u8ddd\u79bb\u6700\u5c0f\u503c\n\n        Args:\n            unit: list | (st.friend &amp; st.movable) (ES: list | st.creep) \u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n            target: st.point (ES: X) \u4e00\u4e2a\u76ee\u6807\u70b9\n            distance: int | tuple (X)\u6700\u5927\u6216\u6700\u5c0f\u8ddd\u79bb, tuple: \u8ddd\u79bb\u8303\u56f4, \u53ea\u5728\u53cb\u65b9\u65f6\u6709\u6548(\u5141\u8bb8\u5ffd\u7565\u8fc7\u4e8e\u9065\u8fdc\u7684\u53cb\u65b9\u8ddf\u968f\u8005)\u3002\u5426\u5219\u5c06[0]\u4f5c\u4e3a\u53c2\u6570\n            options: Options (X) unit\u8fdb\u884c\u79fb\u52a8\u65f6\u7684move options\n            move: bool | Options (X) \u53cb\u65b9target\u662f\u5426\u4f1a\u56de\u9760(\u7684options)\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n        Examples:\n            ```python\n            leader = get.friend(lambda obj: obj.name == 'leader')\n            warriors = get.friends(lambda obj: obj.name == 'warrior')\n            # warriors\u8ddf\u968fleader\uff0c\u8ddd\u79bb\u4e0d\u8d85\u8fc75\u3002leader\u4e0d\u8003\u8651\u8ddd\u79bb\u8d85\u8fc720\u7684warrior\u3002\n            put.follow(warriors, leader, (5, 20))\n            ```\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, target],\n                             ['unit', 'target'],\n                             [combo([st.list, (st.friend, st.movable)]), st.point],\n                             ['obj is not python list. | (' + st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE + ')', st.NOT_POINT])\n            # else\n            if target is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [combo([st.list, st.creep])],\n                             ['obj is not python list. | ' + st.NOT_CREEP])\n            # endif\n        # endif\n\n        target_is_creep = st.creep(target)\n        stop_dist, ignore_dist = distance if isinstance(distance, tuple) else (distance, 0xffff)\n        if isinstance(unit, list):\n            max_dist, furthest = 0, None\n            for _unit in unit:\n                dist = get.distance(_unit, target)\n\n                if target.my:\n\n                    if ignore_dist &gt; dist &gt; max_dist:  # \u53ea\u6709\u5728\u53cb\u65b9\u65f6\u624d\u8003\u8651\n                        max_dist = dist\n                        furthest = _unit\n\n                    _ = put.move(_unit, target, options, False)\n                    if _ != OK:\n                        return _\n                else:\n                    if dist &lt;= stop_dist:\n                        _ = put.escape(_unit, target, options, False)\n                        if _ != OK:\n                            return _\n                    _ = put.move(_unit, target, options, False)\n                    if _ != OK:\n                        return _\n\n            # print(\"follows furthest:\", target.my, max_dist, furthest, \"move:\", move)\n            if move and target.my and target_is_creep and furthest and max_dist &gt; stop_dist:\n                return put.move(target, furthest, None if move is True else move, False)\n            return OK\n        else:\n            dist = get.distance(unit, target)\n            if target.my:\n                if move and target_is_creep and ignore_dist &gt;= dist &gt;= stop_dist:\n                    _ = put.move(target, unit, None if move is True else move, False)\n                    if _ != OK:\n                        return _\n                return put.move(unit, target, options, False)\n            else:\n                if dist &lt;= stop_dist:\n                    return put.escape(unit, target, options, False)\n                return put.move(unit, target, options, False)\n\n    @staticmethod\n    def carry(unit: st.friend &amp; st.storable &amp; st.movable, src: st.storable, dst: st.storable, resource_type: int = RESOURCE_ENERGY,\n              options: Options = None, intermit: bool = False,\n              __assert: bool = True) -&gt; int:\n        \"\"\"\n        \u547d\u4ee4\u5355\u4f4d\u4ecesrc\u5904\u642c\u8fd0\u8d44\u6e90\u5230dst\u5904\n\n        Args:\n            unit: st.friend &amp; st.storable &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u53ef\u79fb\u52a8\u5355\u4f4d\n            src: st.storable (ES: X) \u4ece\u54ea\u91cc\u53d6\u5f97\u8d44\u6e90\n            dst: st.storable (ES: X) \u88ab\u642c\u8fd0\u8d44\u6e90\u7684\u76ee\u6807\u5bb9\u5668\n            resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n            options: Options (X) \u5bfb\u8def\u9009\u9879\n            intermit: bool \u662f\u5426\u65ad\u65ad\u7eed\u7eed\u5730\u642c\u8fd0\u8d44\u6e90\n            __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n        Returns:\n            int \u82e5intermit=False\uff0c\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0); \u82e5intermit=True\uff0c\u5219\u5728\u642c\u8fd0\u5b8c\u6bd5\u6216\u662f\u65e0\u8d44\u6e90\u53ef\u642c\u8fd0\u65f6\uff0c\u8fd4\u56deDONE(1)\uff0c\u5176\u4f59\u548c\u524d\u8005\u76f8\u540c\n\n        Examples:\n            ```python\n            # \u5c06\u8eab\u4e0a\u7684\u8d44\u6e90\u642c\u8fd0\u56de\u5bb6(\u786e\u4fdd\u8eab\u4e0a\u6709\u8d44\u6e90)\n            carrier = get.friend(lambda obj: obj.name == 'carrier')\n            spawn = get.spawn(st.friend)\n            box = get.closest(carrier, get.boxes(st.energetic))\n            put.carry(carrier, box, spawn, RESOURCE_ENERGY)\n            ```\n        \"\"\"\n        # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n        if __assert:\n            # if ASSERT_LEVEL &gt;= ASSERT_FULL\n            std.param_assert([unit, src, dst],\n                             ['unit', 'src', 'dst'],\n                             [combo((st.friend, st.storable, st.movable)), st.storable, st.storable],\n                             [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE + ' &amp; ' + st.NOT_MOVABLE, st.NOT_STORABLE, st.NOT_STORABLE])\n            # else\n            if src is undefined or dst is undefined:\n                return ERR_INVALID_TARGET\n            std.param_assert([unit],\n                             ['unit'],\n                             [st.creep],\n                             [st.NOT_CREEP])\n            # endif\n        # endif\n\n        if not intermit:\n            if get.energy(unit) == 0:\n                return put.fetch(unit, src, resource_type, None, options if options else True, False)\n            return put.deposit(unit, dst, resource_type, None, options if options else True, False)\n        else:\n            drops = get.resources(lambda obj: obj.resourceType == resource_type and get.distance(unit, obj) &lt;= 1)\n            free = unit.store.getFreeCapacity(resource_type)\n            if len(drops) and free &gt; 0:\n                return put.fetch(unit, drops[0], resource_type, free, False, False)  # \u6361\u8d77\u4e1c\u897f\u540e\u8fd9\u4e2a\u56de\u5408\u5c31\u4e0d\u4f1a\u518d\u79fb\u52a8\u4e86\n\n            current = unit.store.getUsedCapacity(resource_type)\n            if current == 0:\n                return put.fetch(unit, src, resource_type, None, options if options else True, False)\n\n            dist = get.distance(unit, dst)\n            if dist &lt;= 1:\n                _ = put.deposit(unit, dst, resource_type, None, options if options else True, False)\n                if _ != OK:\n                    return _\n                return DONE\n            else:\n\n                _ = put.deposit(unit, None, resource_type, None, options if options else True, False)\n                if _ != OK:\n                    return _\n                return put.move(unit, dst, options, False)\n</code></pre>"},{"location":"src/std/#src.std.put.attack","title":"<code>attack(unit, target, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4Tower\u6216Creep\u653b\u51fb\u654c\u65b9\u76ee\u6807</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; atkable</code> <p>st.friend &amp; st.atkable (ES: .attack != undefined) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u653b\u51fb\u5355\u4f4d\uff0c\u4f8b\u5982\uff1a.attack != undefined</p> required <code>target</code> <code>enemy &amp; hitable</code> <p>st.enemy &amp; st.hitable (ES: X) \u4e00\u4e2a\u654c\u65b9\u7684\u53ef\u88ab\u653b\u51fb\u7684\u5355\u4f4d</p> required <code>move</code> <code>bool | Options</code> <p>bool | Options (X) \u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>Result</code> <p>Result (\u5982\u679c\u6ca1\u6709\u6267\u884c\u67d0\u6761\u64cd\u4f5c\uff0c\u5219\u4e0d\u5305\u542b\u5bf9\u5e94\u5c5e\u6027)</p> <p>.melee: int \u53d1\u52a8\u8fd1\u6218\u653b\u51fb\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))</p> <p>.ranged: int \u53d1\u52a8\u8fdc\u7a0b\u653b\u51fb\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))</p> <p>.move: int   \u79fb\u52a8\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef attack(unit: st.friend &amp; st.atkable, target: st.enemy &amp; st.hitable, move: bool | Options = True, __assert: bool = True) -&gt; Result:\n    \"\"\"\n    \u547d\u4ee4Tower\u6216Creep\u653b\u51fb\u654c\u65b9\u76ee\u6807\n\n    Args:\n        unit: st.friend &amp; st.atkable (ES: *.attack != undefined) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u653b\u51fb\u5355\u4f4d\uff0c\u4f8b\u5982\uff1a*.attack != undefined\n        target: st.enemy &amp; st.hitable (ES: X) \u4e00\u4e2a\u654c\u65b9\u7684\u53ef\u88ab\u653b\u51fb\u7684\u5355\u4f4d\n        move: bool | Options (X) \u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        Result (\u5982\u679c\u6ca1\u6709\u6267\u884c\u67d0\u6761\u64cd\u4f5c\uff0c\u5219\u4e0d\u5305\u542b\u5bf9\u5e94\u5c5e\u6027)\n\n            .melee: int \u53d1\u52a8\u8fd1\u6218\u653b\u51fb\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n            .ranged: int \u53d1\u52a8\u8fdc\u7a0b\u653b\u51fb\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n            .move: int   \u79fb\u52a8\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.atkable)), combo((st.enemy, st.hitable))],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_ATKABLE, st.NOT_ENEMY + ' &amp; ' + st.NOT_HITABLE])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [lambda obj: obj and obj.attack != undefined],\n                         ['unit do not have .attack method.'])\n        # endif\n    # endif\n\n    # insert if (unit instanceof StructureTower) return {attack: unit.attack(target)};\n\n    # \u83b7\u53d6\u653b\u51fb\u8ddd\u79bb\n    melee, ranged = st.melee(unit), st.ranged(unit)\n    dist = get.distance(unit, target)  # \u83b7\u53d6\u8ddd\u79ae\n    # insert var result = {};\n\n    if dist == 1:\n        if melee:\n            result.melee = unit.attack(target)\n        if ranged:\n            result.ranged = unit.rangedMassAttack()\n\n        if move and not melee and st.atkable(target):  # \u5982\u679c\u654c\u65b9\u5355\u4f4d\u80fd\u653b\u51fb, \u81ea\u8eab\u53c8\u4e0d\u80fd\u8fd1\u6218\u653b\u51fb\n            result.move = put.escape(unit, target, None if move is True else move, False)\n    elif dist &lt;= 3:\n        if ranged:\n            result.ranged = unit.rangedAttack(target)\n            if move and dist &lt;= 2:  # \u5982\u679c\u654c\u65b9\u5355\u4f4d\u662f\u8fd1\u6218\u5355\u4f4d\u5e76\u4e14\u8ddd\u79bb\u4e3a2(\u5c1d\u8bd5\u98ce\u7b5d\u5bf9\u9762)\n                result.move = put.escape(unit, target, None if move is True else move, False)\n        elif move and melee:\n            result.move = put.move(unit, target, None if move is True else move, False)\n    elif move:\n        result.move = put.move(unit, target, None if move is True else move, False)\n\n    if result.melee == OK:\n        unit.last_melee = get.ticks()\n    if result.ranged == OK:\n        unit.last_ranged = get.ticks()\n\n    return result\n</code></pre>"},{"location":"src/std/#src.std.put.build","title":"<code>build(unit, site, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u5355\u4f4d\u5efa\u9020\u5efa\u7b51</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; workable</code> <p>st.friend &amp; st.workable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u5de5\u4f5c\u5355\u4f4d</p> required <code>site</code> <code>site</code> <p>st.site (ES: X)\u4e00\u4e2aConstructionSite\u5b9e\u4f8b\u5bf9\u8c61</p> required <code>move</code> <code>bool | Options</code> <p>bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef build(unit: st.friend &amp; st.workable, site: st.site, move: bool | Options = True, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u5355\u4f4d\u5efa\u9020\u5efa\u7b51\n\n    Args:\n        unit: st.friend &amp; st.workable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u5de5\u4f5c\u5355\u4f4d\n        site: st.site (ES: X)\u4e00\u4e2aConstructionSite\u5b9e\u4f8b\u5bf9\u8c61\n        move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n    \"\"\"\n\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit],\n                         ['unit'],\n                         [combo((st.friend, st.workable))],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_WORKABLE])\n        # else\n        if site is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    unit.last_build = get.ticks()\n\n    if move and get.distance(unit, site) &gt; 3:\n        return put.move(unit, site, None if move is True else move, False)\n    return unit.build(site)\n</code></pre>"},{"location":"src/std/#src.std.put.carry","title":"<code>carry(unit, src, dst, resource_type=RESOURCE_ENERGY, options=None, intermit=False, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u5355\u4f4d\u4ecesrc\u5904\u642c\u8fd0\u8d44\u6e90\u5230dst\u5904</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; storable &amp; movable</code> <p>st.friend &amp; st.storable &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u53ef\u79fb\u52a8\u5355\u4f4d</p> required <code>src</code> <code>storable</code> <p>st.storable (ES: X) \u4ece\u54ea\u91cc\u53d6\u5f97\u8d44\u6e90</p> required <code>dst</code> <code>storable</code> <p>st.storable (ES: X) \u88ab\u642c\u8fd0\u8d44\u6e90\u7684\u76ee\u6807\u5bb9\u5668</p> required <code>resource_type</code> <code>int</code> <p>int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY</p> <code>RESOURCE_ENERGY</code> <code>options</code> <code>Options</code> <p>Options (X) \u5bfb\u8def\u9009\u9879</p> <code>None</code> <code>intermit</code> <code>bool</code> <p>bool \u662f\u5426\u65ad\u65ad\u7eed\u7eed\u5730\u642c\u8fd0\u8d44\u6e90</p> <code>False</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u82e5intermit=False\uff0c\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0); \u82e5intermit=True\uff0c\u5219\u5728\u642c\u8fd0\u5b8c\u6bd5\u6216\u662f\u65e0\u8d44\u6e90\u53ef\u642c\u8fd0\u65f6\uff0c\u8fd4\u56deDONE(1)\uff0c\u5176\u4f59\u548c\u524d\u8005\u76f8\u540c</p> <p>Examples:</p> Python<pre><code># \u5c06\u8eab\u4e0a\u7684\u8d44\u6e90\u642c\u8fd0\u56de\u5bb6(\u786e\u4fdd\u8eab\u4e0a\u6709\u8d44\u6e90)\ncarrier = get.friend(lambda obj: obj.name == 'carrier')\nspawn = get.spawn(st.friend)\nbox = get.closest(carrier, get.boxes(st.energetic))\nput.carry(carrier, box, spawn, RESOURCE_ENERGY)\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef carry(unit: st.friend &amp; st.storable &amp; st.movable, src: st.storable, dst: st.storable, resource_type: int = RESOURCE_ENERGY,\n          options: Options = None, intermit: bool = False,\n          __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u5355\u4f4d\u4ecesrc\u5904\u642c\u8fd0\u8d44\u6e90\u5230dst\u5904\n\n    Args:\n        unit: st.friend &amp; st.storable &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u53ef\u79fb\u52a8\u5355\u4f4d\n        src: st.storable (ES: X) \u4ece\u54ea\u91cc\u53d6\u5f97\u8d44\u6e90\n        dst: st.storable (ES: X) \u88ab\u642c\u8fd0\u8d44\u6e90\u7684\u76ee\u6807\u5bb9\u5668\n        resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n        options: Options (X) \u5bfb\u8def\u9009\u9879\n        intermit: bool \u662f\u5426\u65ad\u65ad\u7eed\u7eed\u5730\u642c\u8fd0\u8d44\u6e90\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u82e5intermit=False\uff0c\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0); \u82e5intermit=True\uff0c\u5219\u5728\u642c\u8fd0\u5b8c\u6bd5\u6216\u662f\u65e0\u8d44\u6e90\u53ef\u642c\u8fd0\u65f6\uff0c\u8fd4\u56deDONE(1)\uff0c\u5176\u4f59\u548c\u524d\u8005\u76f8\u540c\n\n    Examples:\n        ```python\n        # \u5c06\u8eab\u4e0a\u7684\u8d44\u6e90\u642c\u8fd0\u56de\u5bb6(\u786e\u4fdd\u8eab\u4e0a\u6709\u8d44\u6e90)\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        spawn = get.spawn(st.friend)\n        box = get.closest(carrier, get.boxes(st.energetic))\n        put.carry(carrier, box, spawn, RESOURCE_ENERGY)\n        ```\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, src, dst],\n                         ['unit', 'src', 'dst'],\n                         [combo((st.friend, st.storable, st.movable)), st.storable, st.storable],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE + ' &amp; ' + st.NOT_MOVABLE, st.NOT_STORABLE, st.NOT_STORABLE])\n        # else\n        if src is undefined or dst is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    if not intermit:\n        if get.energy(unit) == 0:\n            return put.fetch(unit, src, resource_type, None, options if options else True, False)\n        return put.deposit(unit, dst, resource_type, None, options if options else True, False)\n    else:\n        drops = get.resources(lambda obj: obj.resourceType == resource_type and get.distance(unit, obj) &lt;= 1)\n        free = unit.store.getFreeCapacity(resource_type)\n        if len(drops) and free &gt; 0:\n            return put.fetch(unit, drops[0], resource_type, free, False, False)  # \u6361\u8d77\u4e1c\u897f\u540e\u8fd9\u4e2a\u56de\u5408\u5c31\u4e0d\u4f1a\u518d\u79fb\u52a8\u4e86\n\n        current = unit.store.getUsedCapacity(resource_type)\n        if current == 0:\n            return put.fetch(unit, src, resource_type, None, options if options else True, False)\n\n        dist = get.distance(unit, dst)\n        if dist &lt;= 1:\n            _ = put.deposit(unit, dst, resource_type, None, options if options else True, False)\n            if _ != OK:\n                return _\n            return DONE\n        else:\n\n            _ = put.deposit(unit, None, resource_type, None, options if options else True, False)\n            if _ != OK:\n                return _\n            return put.move(unit, dst, options, False)\n</code></pre>"},{"location":"src/std/#src.std.put.create","title":"<code>create(spawn, recipe, name=None, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4spawn\u6309\u7167\u6307\u5b9a\u7684\u914d\u65b9\u751f\u4ea7\u4e00\u4e2acreep</p> <p>Parameters:</p> Name Type Description Default <code>spawn</code> <code>friend &amp; spawn</code> <p>st.friend &amp; st.spawn (ES: st.spawn)\u4e00\u4e2a\u53cb\u65b9\u7684Spawn</p> required <code>recipe</code> <code>list[str]</code> <p>list[str] (ES: X) \u4e00\u4e2acreep\u7684\u914d\u65b9, \u4e00\u822c\u7528const\u4e0b\u7684MOVE, CARRY, WORK\u7b49\u5e38\u91cf</p> required <code>name</code> <code>str | None</code> <p>str | None (X) \u4e00\u4e2acreep\u7684\u540d\u5b57(\u9ed8\u8ba4\u4e3aNone), \u8fd9\u6837\u521b\u5efa\u7684creep\u4f1a\u5e26\u6709.name\u5c5e\u6027</p> <code>None</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int | object</code> <p>int | object \u5982\u679c\u6210\u529f(\u751f\u4ea7\u5b8c\u6210)\uff0c\u8fd4\u56de\u521b\u5efa\u7684creep\u5bf9\u8c61; \u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> <p>Examples:</p> Python<pre><code># \u751f\u6210\u4e00\u4e2a\u540d\u4e3a'worker'\u7684creep\nspawn = get.spawn(st.friend)\nworker = get.friend(lambda obj: obj.name == 'worker')\nif not worker:\n    put.create(spawn, [CARRY, MOVE, WORK], 'worker')\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef create(spawn: st.friend &amp; st.spawn, recipe: list[str], name: str | None = None, __assert: bool = True) -&gt; int | object:\n    \"\"\"\n    \u547d\u4ee4spawn\u6309\u7167\u6307\u5b9a\u7684\u914d\u65b9\u751f\u4ea7\u4e00\u4e2acreep\n\n    Args:\n        spawn: st.friend &amp; st.spawn (ES: st.spawn)\u4e00\u4e2a\u53cb\u65b9\u7684Spawn\n        recipe: list[str] (ES: X) \u4e00\u4e2acreep\u7684\u914d\u65b9, \u4e00\u822c\u7528const\u4e0b\u7684MOVE, CARRY, WORK\u7b49\u5e38\u91cf\n        name: str | None (X) \u4e00\u4e2acreep\u7684\u540d\u5b57(\u9ed8\u8ba4\u4e3aNone), \u8fd9\u6837\u521b\u5efa\u7684creep\u4f1a\u5e26\u6709.name\u5c5e\u6027\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int | object \u5982\u679c\u6210\u529f(\u751f\u4ea7\u5b8c\u6210)\uff0c\u8fd4\u56de\u521b\u5efa\u7684creep\u5bf9\u8c61; \u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n    Examples:\n        ```python\n        # \u751f\u6210\u4e00\u4e2a\u540d\u4e3a'worker'\u7684creep\n        spawn = get.spawn(st.friend)\n        worker = get.friend(lambda obj: obj.name == 'worker')\n        if not worker:\n            put.create(spawn, [CARRY, MOVE, WORK], 'worker')\n        ```\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([spawn],\n                         ['spawn'],\n                         [combo((st.spawn, st.friend))],\n                         [st.NOT_SPAWN + ' &amp; ' + st.NOT_FRIEND])\n        # else\n        std.param_assert([spawn],\n                         ['spawn'],\n                         [st.spawn],\n                         [st.NOT_SPAWN])\n        # endif\n    # endif\n\n    ready_index, now_ticks = -1, get.ticks()\n    for i in range(len(put._spawn_memory)):\n        if put._spawn_memory[i].birth_date &lt;= now_ticks:\n            ready_index = i\n            break\n    if ready_index != -1:\n        return put._spawn_memory.pop(ready_index)\n\n    if spawn.lock:\n        if now_ticks &lt;= spawn.lock:\n            return ERR_BUSY\n        spawn.lock = undefined\n\n    # \u5f00\u59cb\u751f\u4ea7\n    info = spawn.spawnCreep(recipe)\n    if info.error:\n        return info.error\n\n    spawn.lock = now_ticks + 2\n    if name: info.object.name = name\n    info.object.birth_date = get.ticks() + CREEP_SPAWN_TIME * len(recipe)\n    put._spawn_memory.append(info.object)\n\n    return ERR_BUSY\n</code></pre>"},{"location":"src/std/#src.std.put.deposit","title":"<code>deposit(unit, target, resource_type=RESOURCE_ENERGY, amount=None, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u5355\u4f4d\u5c06\u8eab\u4e0a\u7684\u8d44\u6e90\u653e\u7f6e\u4e8e\u76ee\u6807\u5904</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; storable</code> <p>st.friend &amp; st.storable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u5355\u4f4d</p> required <code>target</code> <code>storable | None</code> <p>st.storable | None (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\uff0c\u5982\u679c\u4e3aNone\uff0c\u5355\u4f4d\u4f1a\u76f4\u63a5\u4e22\u5f03\u8d44\u6e90\u5230\u539f\u5730</p> required <code>resource_type</code> <code>int</code> <p>int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY</p> <code>RESOURCE_ENERGY</code> <code>amount</code> <code>int | None</code> <p>int | None (X)\u8d44\u6e90\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u8f6c\u79fb\u6240\u6709\u8d44\u6e90</p> <code>None</code> <code>move</code> <code>bool | Options</code> <p>bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> <p>Examples:</p> <p>Python<pre><code># \u8ba9worker\u91c7\u96c6\u8d44\u6e90\u5e76\u628a\u91c7\u96c6\u5230\u7684\u8d44\u6e90\u8fd0\u56despawn\nworker = get.friend(lambda obj: obj.name == 'worker')\nspawn = get.spawn(st.friend)\nsource = get.source()\nif get.energy(worker, True) == 100:\n    put.deposit(worker, spawn, RESOURCE_ENERGY)\nelse:\n    put.harvest(worker, source)\n</code></pre> Python<pre><code># \u8ba9carrier\u4ecebox\u4e0d\u505c\u5730\u53d6\u51fa\u8d44\u6e90\u5e76\u628a\u8d44\u6e90\u4e22\u5728\u5730\u4e0a\ncarrier = get.friend(lambda obj: obj.name == 'carrier')\nbox = get.closest(carrier, get.boxes())\nif get.energy(box) &gt; 0:\n    if get.energy(carrier) == 0:\n        put.fetch(carrier, box, RESOURCE_ENERGY)\n    else:\n        put.deposit(carrier, None, RESOURCE_ENERGY)\n</code></pre> Python<pre><code># \u8ba9carrier\u4ecebox\u53d6\u51fa\u8d44\u6e90\u5e76\u628a\u8d44\u6e90\u9001\u7ed9worker\ncarrier = get.friend(lambda obj: obj.name == 'carrier')\nworker = get.friend(lambda obj: obj.name == 'worker')\nbox = get.closest(carrier, get.boxes(combo( {st.empty} )))  # \u6700\u8fd1\u7684\u975e\u7a7abox\nif get.energy(carrier, True) &gt; 50:  # \u81ea\u8eab\u5e26\u670950%\u4ee5\u4e0a\u7684\u80fd\u91cf\u5c31\u5148\u7ed9worker\n    put.deposit(carrier, worker, RESOURCE_ENERGY)\nelif box:\n    put.fetch(carrier, box, RESOURCE_ENERGY)\n</code></pre></p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef deposit(unit: st.friend &amp; st.storable, target: st.storable | None, resource_type: int = RESOURCE_ENERGY, amount: int | None = None,\n            move: bool | Options = True, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u5355\u4f4d\u5c06\u8eab\u4e0a\u7684\u8d44\u6e90\u653e\u7f6e\u4e8e\u76ee\u6807\u5904\n\n    Args:\n        unit: st.friend &amp; st.storable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u5355\u4f4d\n        target: st.storable | None (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\uff0c\u5982\u679c\u4e3aNone\uff0c\u5355\u4f4d\u4f1a\u76f4\u63a5\u4e22\u5f03\u8d44\u6e90\u5230\u539f\u5730\n        resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n        amount: int | None (X)\u8d44\u6e90\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u8f6c\u79fb\u6240\u6709\u8d44\u6e90\n        move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n    Examples:\n        ```python\n        # \u8ba9worker\u91c7\u96c6\u8d44\u6e90\u5e76\u628a\u91c7\u96c6\u5230\u7684\u8d44\u6e90\u8fd0\u56despawn\n        worker = get.friend(lambda obj: obj.name == 'worker')\n        spawn = get.spawn(st.friend)\n        source = get.source()\n        if get.energy(worker, True) == 100:\n            put.deposit(worker, spawn, RESOURCE_ENERGY)\n        else:\n            put.harvest(worker, source)\n        ```\n        ```python\n        # \u8ba9carrier\u4ecebox\u4e0d\u505c\u5730\u53d6\u51fa\u8d44\u6e90\u5e76\u628a\u8d44\u6e90\u4e22\u5728\u5730\u4e0a\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        box = get.closest(carrier, get.boxes())\n        if get.energy(box) &gt; 0:\n            if get.energy(carrier) == 0:\n                put.fetch(carrier, box, RESOURCE_ENERGY)\n            else:\n                put.deposit(carrier, None, RESOURCE_ENERGY)\n        ```\n        ```python\n        # \u8ba9carrier\u4ecebox\u53d6\u51fa\u8d44\u6e90\u5e76\u628a\u8d44\u6e90\u9001\u7ed9worker\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        worker = get.friend(lambda obj: obj.name == 'worker')\n        box = get.closest(carrier, get.boxes(combo( {st.empty} )))  # \u6700\u8fd1\u7684\u975e\u7a7abox\n        if get.energy(carrier, True) &gt; 50:  # \u81ea\u8eab\u5e26\u670950%\u4ee5\u4e0a\u7684\u80fd\u91cf\u5c31\u5148\u7ed9worker\n            put.deposit(carrier, worker, RESOURCE_ENERGY)\n        elif box:\n            put.fetch(carrier, box, RESOURCE_ENERGY)\n        ```\n    \"\"\"\n\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.storable)), combo([st.storable, lambda obj: obj is None])],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE, st.NOT_STORABLE + ' | ' + 'obj is not None'])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    unit.last_deposit = get.ticks()\n\n    if target is None:\n        return unit.drop(resource_type, amount)\n\n    if move and get.distance(unit, target) &gt; 1:\n        return put.move(unit, target, None if move is True else move, False)\n\n    if amount:\n        return unit.transfer(target, resource_type, amount)\n    else:\n        return unit.transfer(target, resource_type)\n</code></pre>"},{"location":"src/std/#src.std.put.escape","title":"<code>escape(unit, target, options=None, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4Creep\u8fdc\u79bb\u76ee\u6807</p> <p>! \u4e0d\u662f\u5f88\u597d\u7684\u9003\u79bb\u7b97\u6cd5\uff0c\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9003\u8dd1\u7b97\u6cd5(\u5c1d\u8bd5\u8fc7\u4f20\u5165.flee\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u5de5\u4f5c)</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; movable</code> <p>st.friend, st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d</p> required <code>target</code> <code>point</code> <p>st.point (ES: X)\u76ee\u6807\u70b9</p> required <code>options</code> <code>Options</code> <p>Options (X) \u5bfb\u8def\u9009\u9879</p> <code>None</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> <p>Examples:</p> Python<pre><code># \u8ba9worker\u8fdc\u79bb\u6700\u8fd1\u7684\u654c\u4eba\nworker = get.friend(lambda obj: obj.name == 'worker')\nenemy = get.closest(worker, get.enemies())\nif enemy and get.distance(worker, enemy) &lt;= 8:\n    put.escape(worker, enemy)\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef escape(unit: st.friend &amp; st.movable, target: st.point, options: Options = None, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4Creep\u8fdc\u79bb\u76ee\u6807\n\n    ! \u4e0d\u662f\u5f88\u597d\u7684\u9003\u79bb\u7b97\u6cd5\uff0c\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9003\u8dd1\u7b97\u6cd5(\u5c1d\u8bd5\u8fc7\u4f20\u5165.flee\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u5de5\u4f5c)\n\n    Args:\n        unit: st.friend, st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n        target: st.point (ES: X)\u76ee\u6807\u70b9\n        options: Options (X) \u5bfb\u8def\u9009\u9879\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n    Examples:\n        ```python\n        # \u8ba9worker\u8fdc\u79bb\u6700\u8fd1\u7684\u654c\u4eba\n        worker = get.friend(lambda obj: obj.name == 'worker')\n        enemy = get.closest(worker, get.enemies())\n        if enemy and get.distance(worker, enemy) &lt;= 8:\n            put.escape(worker, enemy)\n        ```\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.movable)), st.point],\n                         [st.NOT_FRIEND + \" &amp; \" + st.NOT_MOVABLE, st.NOT_POINT])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    pos = Options()\n    pos.x = unit.x + get.sign(unit.x - target.x)\n    pos.y = unit.y + get.sign(unit.y - target.y)\n    if get.terrain(pos) == TERRAIN_WALL:\n        spawn = get.spawn(st.friend)\n        if spawn:\n            return put.move(unit, spawn, options)\n    return put.move(unit, pos, options)\n</code></pre>"},{"location":"src/std/#src.std.put.fetch","title":"<code>fetch(unit, target, resource_type=RESOURCE_ENERGY, amount=None, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u5355\u4f4d\u4ece\u76ee\u6807\u5904\u53d6\u51fa\u8d44\u6e90</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; storable</code> <p>st.friend &amp; st.storable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u5355\u4f4d</p> required <code>target</code> <code>storable | resource</code> <p>st.storable | st.resource (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\u6216\u6389\u843d\u7684\u8d44\u6e90</p> required <code>resource_type</code> <code>int</code> <p>int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY</p> <code>RESOURCE_ENERGY</code> <code>amount</code> <code>int | None</code> <p>int | None (X)\u8d44\u6e90\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u53d6\u51fa\u6240\u6709\u8d44\u6e90</p> <code>None</code> <code>move</code> <code>bool | Options</code> <p>bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef fetch(unit: st.friend &amp; st.storable, target: st.storable | st.resource, resource_type: int = RESOURCE_ENERGY, amount: int | None = None,\n          move: bool | Options = True,\n          __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u5355\u4f4d\u4ece\u76ee\u6807\u5904\u53d6\u51fa\u8d44\u6e90\n\n    Args:\n        unit: st.friend &amp; st.storable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u643a\u5e26\u8d44\u6e90\u7684\u5355\u4f4d\n        target: st.storable | st.resource (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\u6216\u6389\u843d\u7684\u8d44\u6e90\n        resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n        amount: int | None (X)\u8d44\u6e90\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u53d6\u51fa\u6240\u6709\u8d44\u6e90\n        move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.storable)), combo([st.storable, st.resource])],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE, st.NOT_STORABLE + ' | ' + st.NOT_RESOURCE])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    if move and get.distance(unit, target) &gt; 1:\n        return put.move(unit, target, None if move is True else move, False)\n\n    # insert if((target instanceof Resource) &amp;&amp; target.resourceType == RESOURCE_ENERGY) return unit.pickup(target);\n\n    unit.last_fetch = get.ticks()\n\n    if amount:\n        # insert if(target instanceof Creep) return target.transfer(unit, resource_type, amount);\n        # insert if(target instanceof Structure) return unit.withdraw(target, resource_type, amount);\n        pass\n    else:\n        # insert if(target instanceof Creep) return target.transfer(unit, resource_type);\n        # insert if(target instanceof Structure) return unit.withdraw(target, resource_type);\n        pass\n    return ERR_INVALID_TARGET\n</code></pre>"},{"location":"src/std/#src.std.put.follow","title":"<code>follow(unit, target, distance, options=None, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u4f4d\u8ddf\u968f\u76ee\u6807(\u53ef\u4ee5\u662f\u5c3e\u968f\uff0cCreep\u795f\u795f)</p> <ul> <li> <p>\u8ddf\u968f\u53cb\u65b9\u65f6\uff0cdistance\u4e3a\u8ddd\u79bb\u6700\u5927\u503c\uff0c\u8d85\u51fa\u8ddd\u79bb(\u4e14\u542f\u7528move)\u65f6\u5c06\u547d\u4ee4target\u4e3b\u52a8\u9760\u8fd1unit(\u6216\u6700\u8fdc\u7684unit)</p> </li> <li> <p>\u8ddf\u968f\u654c\u65b9\u65f6\uff0cdistance\u4e3a\u8ddd\u79bb\u6700\u5c0f\u503c</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>list | friend &amp; movable</code> <p>list | (st.friend &amp; st.movable) (ES: list | st.creep) \u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d</p> required <code>target</code> <code>movable</code> <p>st.point (ES: X) \u4e00\u4e2a\u76ee\u6807\u70b9</p> required <code>distance</code> <code>int | tuple</code> <p>int | tuple (X)\u6700\u5927\u6216\u6700\u5c0f\u8ddd\u79bb, tuple: \u8ddd\u79bb\u8303\u56f4, \u53ea\u5728\u53cb\u65b9\u65f6\u6709\u6548(\u5141\u8bb8\u5ffd\u7565\u8fc7\u4e8e\u9065\u8fdc\u7684\u53cb\u65b9\u8ddf\u968f\u8005)\u3002\u5426\u5219\u5c06[0]\u4f5c\u4e3a\u53c2\u6570</p> required <code>options</code> <code>Options</code> <p>Options (X) unit\u8fdb\u884c\u79fb\u52a8\u65f6\u7684move options</p> <code>None</code> <code>move</code> <code>bool | Options</code> <p>bool | Options (X) \u53cb\u65b9target\u662f\u5426\u4f1a\u56de\u9760(\u7684options)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> <p>Examples:</p> Python<pre><code>leader = get.friend(lambda obj: obj.name == 'leader')\nwarriors = get.friends(lambda obj: obj.name == 'warrior')\n# warriors\u8ddf\u968fleader\uff0c\u8ddd\u79bb\u4e0d\u8d85\u8fc75\u3002leader\u4e0d\u8003\u8651\u8ddd\u79bb\u8d85\u8fc720\u7684warrior\u3002\nput.follow(warriors, leader, (5, 20))\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef follow(unit: list | (st.friend &amp; st.movable), target: st.movable, distance: int | tuple, options: Options = None,\n           move: bool | Options = True, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u4f4d\u8ddf\u968f\u76ee\u6807(\u53ef\u4ee5\u662f\u5c3e\u968f\uff0cCreep\u795f\u795f)\n\n    * \u8ddf\u968f\u53cb\u65b9\u65f6\uff0cdistance\u4e3a\u8ddd\u79bb\u6700\u5927\u503c\uff0c\u8d85\u51fa\u8ddd\u79bb(\u4e14\u542f\u7528move)\u65f6\u5c06\u547d\u4ee4target\u4e3b\u52a8\u9760\u8fd1unit(\u6216\u6700\u8fdc\u7684unit)\n\n    * \u8ddf\u968f\u654c\u65b9\u65f6\uff0cdistance\u4e3a\u8ddd\u79bb\u6700\u5c0f\u503c\n\n    Args:\n        unit: list | (st.friend &amp; st.movable) (ES: list | st.creep) \u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n        target: st.point (ES: X) \u4e00\u4e2a\u76ee\u6807\u70b9\n        distance: int | tuple (X)\u6700\u5927\u6216\u6700\u5c0f\u8ddd\u79bb, tuple: \u8ddd\u79bb\u8303\u56f4, \u53ea\u5728\u53cb\u65b9\u65f6\u6709\u6548(\u5141\u8bb8\u5ffd\u7565\u8fc7\u4e8e\u9065\u8fdc\u7684\u53cb\u65b9\u8ddf\u968f\u8005)\u3002\u5426\u5219\u5c06[0]\u4f5c\u4e3a\u53c2\u6570\n        options: Options (X) unit\u8fdb\u884c\u79fb\u52a8\u65f6\u7684move options\n        move: bool | Options (X) \u53cb\u65b9target\u662f\u5426\u4f1a\u56de\u9760(\u7684options)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n    Examples:\n        ```python\n        leader = get.friend(lambda obj: obj.name == 'leader')\n        warriors = get.friends(lambda obj: obj.name == 'warrior')\n        # warriors\u8ddf\u968fleader\uff0c\u8ddd\u79bb\u4e0d\u8d85\u8fc75\u3002leader\u4e0d\u8003\u8651\u8ddd\u79bb\u8d85\u8fc720\u7684warrior\u3002\n        put.follow(warriors, leader, (5, 20))\n        ```\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo([st.list, (st.friend, st.movable)]), st.point],\n                         ['obj is not python list. | (' + st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE + ')', st.NOT_POINT])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [combo([st.list, st.creep])],\n                         ['obj is not python list. | ' + st.NOT_CREEP])\n        # endif\n    # endif\n\n    target_is_creep = st.creep(target)\n    stop_dist, ignore_dist = distance if isinstance(distance, tuple) else (distance, 0xffff)\n    if isinstance(unit, list):\n        max_dist, furthest = 0, None\n        for _unit in unit:\n            dist = get.distance(_unit, target)\n\n            if target.my:\n\n                if ignore_dist &gt; dist &gt; max_dist:  # \u53ea\u6709\u5728\u53cb\u65b9\u65f6\u624d\u8003\u8651\n                    max_dist = dist\n                    furthest = _unit\n\n                _ = put.move(_unit, target, options, False)\n                if _ != OK:\n                    return _\n            else:\n                if dist &lt;= stop_dist:\n                    _ = put.escape(_unit, target, options, False)\n                    if _ != OK:\n                        return _\n                _ = put.move(_unit, target, options, False)\n                if _ != OK:\n                    return _\n\n        # print(\"follows furthest:\", target.my, max_dist, furthest, \"move:\", move)\n        if move and target.my and target_is_creep and furthest and max_dist &gt; stop_dist:\n            return put.move(target, furthest, None if move is True else move, False)\n        return OK\n    else:\n        dist = get.distance(unit, target)\n        if target.my:\n            if move and target_is_creep and ignore_dist &gt;= dist &gt;= stop_dist:\n                _ = put.move(target, unit, None if move is True else move, False)\n                if _ != OK:\n                    return _\n            return put.move(unit, target, options, False)\n        else:\n            if dist &lt;= stop_dist:\n                return put.escape(unit, target, options, False)\n            return put.move(unit, target, options, False)\n</code></pre>"},{"location":"src/std/#src.std.put.harvest","title":"<code>harvest(unit, target, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u5355\u4f4d\u91c7\u96c6\u8d44\u6e90</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; workable</code> <p>st.friend &amp; st.workable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u5de5\u4f5c\u5355\u4f4d</p> required <code>target</code> <code>source</code> <p>st.source (ES: X)\u4e00\u4e2a\u8d44\u6e90\u70b9</p> required <code>move</code> <code>bool | Options</code> <p>bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> <p>Examples:</p> Python<pre><code># \u8ba9worker\u91c7\u96c6\u8d44\u6e90(\u88c5\u6ee1\u4e86\u5c31\u56de\u5bb6\uff0c\u5426\u5219\u5c31\u7ee7\u7eed\u91c7\u96c6)\nworker = get.friend(lambda obj: obj.name == 'worker')\nspawn = get.spawn(st.friend)\nsource = get.source()\nif get.energy(worker, True) == 100:\n    put.deposit(worker, spawn, RESOURCE_ENERGY)\nelse:\n    put.harvest(worker, source)\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef harvest(unit: st.friend &amp; st.workable, target: st.source, move: bool | Options = True, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u5355\u4f4d\u91c7\u96c6\u8d44\u6e90\n\n    Args:\n        unit: st.friend &amp; st.workable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u5de5\u4f5c\u5355\u4f4d\n        target: st.source (ES: X)\u4e00\u4e2a\u8d44\u6e90\u70b9\n        move: bool | Options (X)\u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n\n    Examples:\n        ```python\n        # \u8ba9worker\u91c7\u96c6\u8d44\u6e90(\u88c5\u6ee1\u4e86\u5c31\u56de\u5bb6\uff0c\u5426\u5219\u5c31\u7ee7\u7eed\u91c7\u96c6)\n        worker = get.friend(lambda obj: obj.name == 'worker')\n        spawn = get.spawn(st.friend)\n        source = get.source()\n        if get.energy(worker, True) == 100:\n            put.deposit(worker, spawn, RESOURCE_ENERGY)\n        else:\n            put.harvest(worker, source)\n        ```\n    \"\"\"\n\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.workable)), st.source],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_WORKABLE, st.NOT_SOURCE])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    unit.last_harvest = get.ticks()\n\n    if move and get.distance(unit, target) &gt; 1:\n        return put.move(unit, target, None if move is True else move, False)\n\n    return unit.harvest(target)\n</code></pre>"},{"location":"src/std/#src.std.put.heal","title":"<code>heal(unit, target, move=True, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4Tower\u6216Creep\u6cbb\u7597\u76ee\u6807\u5355\u4f4d</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; healable</code> <p>st.friend &amp; st.healable (ES: *.heal != undefined) \u4e00\u4e2a\u53cb\u65b9\u7684\u5177\u6709\u6cbb\u7597\u80fd\u529b\u7684\u5355\u4f4d</p> required <code>target</code> <code>friend &amp; creep</code> <p>st.friend &amp; st.creep (ES: X) \u4e00\u4e2a\u53cb\u65b9\u7684creep</p> required <code>move</code> <code>bool | Options</code> <p>bool | Options (X) \u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)</p> <code>True</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>Result</code> <p>Result (\u5982\u679c\u6ca1\u6709\u6267\u884c\u67d0\u6761\u64cd\u4f5c\uff0c\u5219\u4e0d\u5305\u542b\u5bf9\u5e94\u5c5e\u6027)</p> <p>.heal: int \u8fd1\u8ddd\u79bb\u6cbb\u7597\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))</p> <p>.ranged: int \u8fdc\u7a0b\u6cbb\u7597\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))</p> <p>.move: int   \u79fb\u52a8\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef heal(unit: st.friend &amp; st.healable, target: st.friend &amp; st.creep, move: bool | Options = True, __assert: bool = True) -&gt; Result:\n    \"\"\"\n    \u547d\u4ee4Tower\u6216Creep\u6cbb\u7597\u76ee\u6807\u5355\u4f4d\n\n    Args:\n        unit: st.friend &amp; st.healable (ES: *.heal != undefined) \u4e00\u4e2a\u53cb\u65b9\u7684\u5177\u6709\u6cbb\u7597\u80fd\u529b\u7684\u5355\u4f4d\n        target: st.friend &amp; st.creep (ES: X) \u4e00\u4e2a\u53cb\u65b9\u7684creep\n        move: bool | Options (X) \u662f\u5426\u53ef\u4ee5\u81ea\u4e3b\u79fb\u52a8(\u53ef\u4ee5\u4f20\u5165options, \u89c6\u4f5cTrue\uff0c\u7528\u4e8e\u8c03\u6574\u79fb\u52a8\u65f6\u7684\u8def\u7ebf)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        Result (\u5982\u679c\u6ca1\u6709\u6267\u884c\u67d0\u6761\u64cd\u4f5c\uff0c\u5219\u4e0d\u5305\u542b\u5bf9\u5e94\u5c5e\u6027)\n\n            .heal: int \u8fd1\u8ddd\u79bb\u6cbb\u7597\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n            .ranged: int \u8fdc\u7a0b\u6cbb\u7597\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n            .move: int   \u79fb\u52a8\u65f6\u8bb0\u5f55\u5bf9\u5e94\u7684\u8fd4\u56de\u503c(\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0))\n\n    \"\"\"\n\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.healable)), combo((st.friend, st.creep))],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_HEALABLE, st.NOT_FRIEND + ' &amp; ' + st.NOT_CREEP])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [lambda obj: obj and obj.heal != undefined],\n                         ['unit do not have .heal method.'])\n        # endif\n    # endif\n\n    # insert if (unit instanceof StructureTower) return {heal: unit.heal(target)};\n    # insert var result = {};\n\n    dist = get.distance(unit, target)\n    if dist &lt;= 1:\n        result.heal = unit.heal(target)\n    elif dist &lt;= 3:\n        result.ranged = unit.rangedHeal(target)\n    elif move:\n        result.move = put.move(unit, target, None if move is True else move, False)\n\n    if result.heal == OK or result.ranged == OK:\n        unit.last_heal = get.ticks()\n    return result\n</code></pre>"},{"location":"src/std/#src.std.put.intermit","title":"<code>intermit(unit, target, resource_type=RESOURCE_ENERGY, options=None, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u65ad\u65ad\u7eed\u7eed\u5730\u642c\u8fd0\u8d44\u6e90\u5230\u76ee\u6807</p> <ul> <li>\u7279\u522b\u9002\u7528\u4e8e\u7a7a\u8f7d\u548c\u6ee1\u8f7d\u72b6\u6001\u4e0b\u79fb\u52a8\u80fd\u529b\u5dee\u8ddd\u5de8\u5927\u7684\u5355\u4f4d</li> </ul> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; storable &amp; movable</code> <p>st.friend &amp; st.storable &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u79fb\u52a8\u7684\u53ef\u5b58\u50a8\u8d44\u6e90\u7684\u5355\u4f4d</p> required <code>target</code> <code>storable</code> <p>st.storable (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807</p> required <code>resource_type</code> <code>int</code> <p>int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY</p> <code>RESOURCE_ENERGY</code> <code>options</code> <code>Options</code> <p>Options (X) \u5bfb\u8def\u9009\u9879</p> <code>None</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>int \u6210\u529f\u642c\u8fd0\u5b8c\u6bd5\u6216\u662f\u65e0\u8d44\u6e90\u53ef\u642c\u8fd0\uff0c\u8fd4\u56deDONE(1); \u642c\u8fd0\u4e2d\u8fd4\u56deOK(0)\u6216\u662f\u9519\u8bef\u7801(&lt;0)</p> <p>Examples:</p> Python<pre><code># \u5c06\u8eab\u4e0a\u6216\u5730\u4e0a\u7684\u8d44\u6e90\u642c\u8fd0\u56de\u5bb6(\u786e\u4fdd\u8eab\u4e0a\u6216\u5730\u4e0a\u6709\u8d44\u6e90)\ncarrier = get.friend(lambda obj: obj.name == 'carrier')\nspawn = get.spawn(st.friend)\nput.intermit(carrier, spawn, RESOURCE_ENERGY)\n</code></pre> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef intermit(unit: st.friend &amp; st.storable &amp; st.movable, target: st.storable, resource_type: int = RESOURCE_ENERGY, options: Options = None,\n             __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u65ad\u65ad\u7eed\u7eed\u5730\u642c\u8fd0\u8d44\u6e90\u5230\u76ee\u6807\n\n    * \u7279\u522b\u9002\u7528\u4e8e\u7a7a\u8f7d\u548c\u6ee1\u8f7d\u72b6\u6001\u4e0b\u79fb\u52a8\u80fd\u529b\u5dee\u8ddd\u5de8\u5927\u7684\u5355\u4f4d\n\n    Args:\n        unit: st.friend &amp; st.storable &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53cb\u65b9\u7684\u53ef\u79fb\u52a8\u7684\u53ef\u5b58\u50a8\u8d44\u6e90\u7684\u5355\u4f4d\n        target: st.storable (ES: X)\u4e00\u4e2a\u53ef\u5b58\u50a8\u7684\u76ee\u6807\n        resource_type: int (X)\u8d44\u6e90\u7c7b\u578b, \u9ed8\u8ba4RESOURCE_ENERGY\n        options: Options (X) \u5bfb\u8def\u9009\u9879\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        int \u6210\u529f\u642c\u8fd0\u5b8c\u6bd5\u6216\u662f\u65e0\u8d44\u6e90\u53ef\u642c\u8fd0\uff0c\u8fd4\u56deDONE(1); \u642c\u8fd0\u4e2d\u8fd4\u56deOK(0)\u6216\u662f\u9519\u8bef\u7801(&lt;0)\n\n    Examples:\n        ```python\n        # \u5c06\u8eab\u4e0a\u6216\u5730\u4e0a\u7684\u8d44\u6e90\u642c\u8fd0\u56de\u5bb6(\u786e\u4fdd\u8eab\u4e0a\u6216\u5730\u4e0a\u6709\u8d44\u6e90)\n        carrier = get.friend(lambda obj: obj.name == 'carrier')\n        spawn = get.spawn(st.friend)\n        put.intermit(carrier, spawn, RESOURCE_ENERGY)\n        ```\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo((st.friend, st.storable, st.movable)), st.storable],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_STORABLE + ' &amp; ' + st.NOT_MOVABLE, st.NOT_STORABLE])\n        # else\n        if target is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    drops = get.resources(lambda obj: obj.resourceType == resource_type and get.distance(unit, obj) &lt;= 1)\n    free = unit.store.getFreeCapacity(resource_type)\n    if len(drops) and free &gt; 0:\n        unit.last_intermit = get.ticks()\n        return put.fetch(unit, drops[0], resource_type, free, False, False)  # \u6361\u8d77\u4e1c\u897f\u540e\u8fd9\u4e2a\u56de\u5408\u5c31\u4e0d\u4f1a\u518d\u79fb\u52a8\u4e86\n\n    current = unit.store.getUsedCapacity(resource_type)\n    if current == 0:\n        return DONE\n\n    unit.last_intermit = get.ticks()\n\n    dist = get.distance(unit, target)\n    if dist &lt;= 1:\n        _ = put.deposit(unit, target, resource_type, None, options if options else True, False)\n        if _ != OK:\n            return _\n        return DONE\n    else:\n\n        _ = put.deposit(unit, None, resource_type, None, options if options else True, False)\n        if _ != OK:\n            return _\n        return put.move(unit, target, options, False)\n</code></pre>"},{"location":"src/std/#src.std.put.move","title":"<code>move(unit, to, options=None, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4Creep\u79fb\u52a8\u5230\u76ee\u6807\u70b9\u6216\u5411\u67d0\u4e2a\u65b9\u5411\u79fb\u52a8</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>friend &amp; movable</code> <p>st.friend &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d</p> required <code>to</code> <code>point | int</code> <p>st.point | int (ES: X)\u4e00\u4e2a\u76ee\u6807\u70b9\u6216\u662f\u4e00\u4e2a\u65b9\u5411</p> required <code>options</code> <code>Options</code> <p>Options (X) \u5bfb\u8def\u9009\u9879(\u53ea\u5728to\u4e3ast.point\u65f6\u6709\u6548)</p> <code>None</code> <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef move(unit: st.friend &amp; st.movable, to: st.point | int, options: Options = None, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4Creep\u79fb\u52a8\u5230\u76ee\u6807\u70b9\u6216\u5411\u67d0\u4e2a\u65b9\u5411\u79fb\u52a8\n\n    Args:\n        unit: st.friend &amp; st.movable (ES: st.creep) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n        to: st.point | int (ES: X)\u4e00\u4e2a\u76ee\u6807\u70b9\u6216\u662f\u4e00\u4e2a\u65b9\u5411\n        options: Options (X) \u5bfb\u8def\u9009\u9879(\u53ea\u5728to\u4e3ast.point\u65f6\u6709\u6548)\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, to],\n                         ['unit', 'to'],\n                         [combo((st.friend, st.movable)), combo([st.point, st.number])],\n                         [st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE, st.NOT_POINT + ' | ' + st.NOT_NUMBER])\n        # else\n        if to is undefined:\n            return ERR_INVALID_TARGET\n        std.param_assert([unit],\n                         ['unit'],\n                         [st.creep],\n                         [st.NOT_CREEP])\n        # endif\n    # endif\n\n    if to.x != undefined and to.y != undefined:  # to is a point:\n        if options:  # \u5bfb\u8def options\n            if unit.path_goal != to:  # \u5982\u679c\u76ee\u6807\u4e0d\u540c\uff0c\u91cd\u65b0\u5bfb\u8def\n                path_res = searchPath(unit, to, options)\n                if path_res.incomplete:\n                    print('Can not find a options path to target:', to, \"use default path.\")\n                else:\n                    # \u4fdd\u7559\u5bf9\u540c\u4e00\u76ee\u6807\u7684\u5bfb\u8def\u7ed3\u679c(\u51cf\u5c11cpu\u6d88\u8017)\n                    unit.path = path_res.path\n                    unit.path_goal = to\n                    unit.path_index = 0\n        if unit.path:\n            to = unit.path[unit.path_index]\n            unit.path_index += 1\n            if unit.path_index &gt;= unit.path.length:\n                unit.path = None\n                unit.path_index = 0\n        _ = unit.moveTo(to)\n    else:\n        _ = unit.move(to)\n\n    if _ == OK:  # \u4f5c\u4e3a\u5224\u5b9a\u4f9d\u636e  (get.ticks()\u5e94\u8be5\u6548\u7387\u5f88\u9ad8)\n        unit.last_move = get.ticks()\n\n    return _\n</code></pre>"},{"location":"src/std/#src.std.put.push","title":"<code>push(unit, target, __assert=True)</code>  <code>staticmethod</code>","text":"<p>\u547d\u4ee4\u4e00\u4e2a\u6216\u591a\u4e2aCreep\u63a8\u52a8\u76ee\u6807Creep * \u53ef\u4ee5\u8ba9\u591a\u4e2a\u9ad8\u673a\u52a8\u529b\u7684Creep\u5e2e\u52a9\u63a8\u52a8\u4e00\u4e2a\u4f4e\u673a\u52a8\u529b\u7684Creep\u79fb\u52a8(target\u5fc5\u987b\u6b63\u5728\u79fb\u52a8)</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>list | friend &amp; movable</code> <p>list | (st.friend &amp; st.movable) (ES: st.creep | list) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d</p> required <code>target</code> <code>friend &amp; movable</code> <p>st.friend &amp; st.movable (ES: st.creep)\u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d</p> required <code>__assert</code> <code>bool</code> <p>bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>\u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef push(unit: list | (st.friend &amp; st.movable), target: st.friend &amp; st.movable, __assert: bool = True) -&gt; int:\n    \"\"\"\n    \u547d\u4ee4\u4e00\u4e2a\u6216\u591a\u4e2aCreep\u63a8\u52a8\u76ee\u6807Creep\n    * \u53ef\u4ee5\u8ba9\u591a\u4e2a\u9ad8\u673a\u52a8\u529b\u7684Creep\u5e2e\u52a9\u63a8\u52a8\u4e00\u4e2a\u4f4e\u673a\u52a8\u529b\u7684Creep\u79fb\u52a8(target\u5fc5\u987b\u6b63\u5728\u79fb\u52a8)\n\n    Args:\n        unit: list | (st.friend &amp; st.movable) (ES: st.creep | list) \u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n        target: st.friend &amp; st.movable (ES: st.creep)\u4e00\u4e2a\u53ef\u79fb\u52a8\u7684\u53cb\u65b9\u5355\u4f4d\n        __assert: bool \u662f\u5426\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\n\n    Returns:\n        \u6210\u529f\u8fd4\u56deOK(0)\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u7801(&lt;0)\n    \"\"\"\n    # if ASSERT_LEVEL &gt; ASSERT_DISABLE\n    if __assert:\n        # if ASSERT_LEVEL &gt;= ASSERT_FULL\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo([st.list, (st.friend, st.movable)]), combo((st.friend, st.movable))],\n                         ['obj is not a list | (' + st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE + ')', st.NOT_FRIEND + ' &amp; ' + st.NOT_MOVABLE])\n        # else\n        std.param_assert([unit, target],\n                         ['unit', 'target'],\n                         [combo([st.creep, st.list]), st.creep],\n                         ['obj is not a creep | list', st.NOT_CREEP])\n        # endif\n    # endif\n\n    if isinstance(unit, list):\n        for each in unit:\n            target.pull(each)\n            _ = put.move(each, target, None, False)\n            if _ != OK:\n                return _\n    else:\n        target.pull(unit)\n        return put.move(unit, target, None, False)\n</code></pre>"},{"location":"src/std/#src.std.st","title":"<code>st</code>","text":"Source code in <code>src\\std.py</code> Python<pre><code>class st:\n    NOT_NUMBER = \"obj is not number.\"\n    NOT_CREEP = \"obj is not creep.\"\n    NOT_SPAWN = \"obj is not spawn.\"\n    NOT_TOWER = \"obj is not tower.\"\n    NOT_STRUCTURE = \"obj is not structure.\"\n    NOT_SITE = \"obj is not site.\"\n    NOT_RESOURCE = \"obj is not resource.\"\n    NOT_SOURCE = \"obj is not source.\"\n    NOT_FLAG = \"obj is not flag.\"\n    NOT_RAMPART = \"obj is not rampart.\"\n    NOT_WALL = \"obj is not wall.\"\n    NOT_ROAD = \"obj is not road.\"\n    NOT_BOX = \"obj is not box.\"\n    NOT_EXTENSION = \"obj is not extension.\"\n\n    NOT_MOVABLE = \"obj is not movable.\"\n    NOT_ATKABLE = \"obj is not atkable.\"\n    NOT_HEALABLE = \"obj is not healable.\"\n    NOT_HITABLE = \"obj is not hitable.\"\n    NOT_WORKABLE = \"obj is not workable.\"\n    NOT_STORABLE = \"obj is not storable.\"\n    NOT_FRIEND = \"obj is not friend.\"\n    NOT_ENEMY = \"obj is not enemy.\"\n    NOT_POINT = \"obj is not point.\"\n\n    POOR = \"Not enough energy or resources.\"\n    BUSY = \"The structure is busy.\"\n    INVALID = \"Invalid arguments or target.\"\n    OUT_RANGE = \"The target is out of range.\"\n    CREEP_FULL = \"The creep is full.\"\n\n    @staticmethod\n    def number(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662fjs Number\n\n\n        Args:\n            obj:\n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', \"return typeof obj === 'number';\")\n        pass\n\n    @staticmethod\n    def list(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662fpy list\n\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        return isinstance(obj, list)\n\n    @staticmethod\n    def creep(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Creep\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof Creep;')\n        pass\n\n    @staticmethod\n    def spawn(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Spawn\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureSpawn;')\n        pass\n\n    @staticmethod\n    def tower(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureTower\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureTower;')\n        pass\n\n    @staticmethod\n    def structure(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Structure\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof Structure;')\n        pass\n\n    @staticmethod\n    def site(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:ConstructionSite\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof ConstructionSite;')\n        pass\n\n    @staticmethod\n    def resource(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Resource\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof Resource;')\n        pass\n\n    @staticmethod\n    def source(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Source\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof Source;')\n        pass\n\n    @staticmethod\n    def flag(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Flag\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof Flag;')\n        pass\n\n    @staticmethod\n    def rampart(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureRampart\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureRampart;')\n        pass\n\n    @staticmethod\n    def wall(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureWall\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureWall;')\n        pass\n\n    @staticmethod\n    def road(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureRoad\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureRoad;')\n        pass\n\n    @staticmethod\n    def box(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureContainer\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureContainer;')\n        pass\n\n    @staticmethod\n    def extension(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureExtension\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', 'return obj instanceof StructureExtension;')\n        pass\n\n    # -------------------------------------- Ducking: --------------------------------------\n\n    @staticmethod\n    def movable(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u79fb\u52a8\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # insert if(obj &amp;&amp; obj.body) for(var p of obj.body) if (p.type == MOVE) return true;\n        return False\n\n    @staticmethod\n    def atkable(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u653b\u51fb(\u6216\u8fdc\u7a0b\u653b\u51fb)\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        if obj:\n            if obj.body:\n                # __pragma__('js', 'for(var p of obj.body) if (p.type == ATTACK || p.type == RANGED_ATTACK) return true;')\n                pass\n            elif obj.attack:\n                return True\n        return False\n\n    @staticmethod\n    def melee(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u8fd1\u6218\u653b\u51fb\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # insert if(obj &amp;&amp; obj.body) for(var p of obj.body) if (p.type == ATTACK) return true;\n        return False\n\n    @staticmethod\n    def ranged(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u8fdc\u7a0b\u653b\u51fb\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        if obj:\n            if obj.body:\n                # __pragma__('js', 'for(var p of obj.body) if (p.type == RANGED_ATTACK) return true;')\n                pass\n            elif obj.attack:\n                return True\n        return False\n\n    @staticmethod\n    def healable(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u6cbb\u7597\u4ed6\u4eba\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        if obj:\n            if obj.body:\n                # __pragma__('js', 'for(var p of obj.body) if (p.type == HEAL) return true;')\n                pass\n            elif obj.heal:\n                return True\n        return False\n\n    @staticmethod\n    def hitable(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u88ab\u653b\u51fb\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        return obj and obj.hits != undefined\n\n    @staticmethod\n    def workable(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # insert if(obj &amp;&amp; obj.body) for(var p of obj.body) if (p.type == WORK) return true;\n        return False\n\n    @staticmethod\n    def storable(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u50a8\u5b58\u8d44\u6e90(\u548c\u73b0\u6709\u8d44\u6e90\u60c5\u51b5\u65e0\u5173)\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        # insert if(obj instanceof Structure &amp;&amp; obj.store) return true;\n        # insert if(obj instanceof Creep &amp;&amp; obj.body) for(var p of obj.body) if (p.type == CARRY) return true;\n        return False\n\n    @staticmethod\n    def energetic(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u88ab\u5355\u4f4d\u62ff\u53d6\u5230\u80fd\u91cf\n\n        Args:\n            obj:\n\n        Returns:\n\n        \"\"\"\n        # insert if(obj instanceof Structure &amp;&amp; obj.store &amp;&amp; get.energy(obj) &gt; 0) return true;\n        # insert if(obj instanceof Creep &amp;&amp; get.energy(obj) &gt; 0) return true;\n        # insert if(obj instanceof Resource &amp;&amp; obj.amount &gt; 0) return true;\n        pass\n\n    @staticmethod\n    def damaged(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53d7\u635f\n\n        Args:\n            obj:\n\n        Returns:\n\n        \"\"\"\n        # insert if(obj.hits &lt; obj.hitsMax) return true;\n        pass\n\n    @staticmethod\n    def friend(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u53cb\u65b9\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        return obj and obj.my\n\n    @staticmethod\n    def my(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u5df1\u65b9\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        return obj and obj.my\n\n    @staticmethod\n    def enemy(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u654c\u65b9\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        return obj and not obj.my\n\n    @staticmethod\n    def point(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5750\u6807\u70b9(\u5177\u6709x\u548cy\u5c5e\u6027)\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        return obj.x != undefined and obj.y != undefined\n\n    @staticmethod\n    def empty(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u7684store\u662f\u5426\u4e3a\u7a7a(\u7279\u6307RESOURCE_ENERGY)\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        if not obj or not obj.store:\n            return True\n        return get.energy(obj) == 0\n\n    @staticmethod\n    def full(obj: object) -&gt; bool:\n        \"\"\"\n        \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u7684store\u662f\u5426\u6ee1(\u7279\u6307RESOURCE_ENERGY)\n\n        Args:\n            obj: \n\n        Returns:\n\n        \"\"\"\n        if not obj or not obj.store:\n            return True\n        return get.energy(obj, True, '=100')\n</code></pre>"},{"location":"src/std/#src.std.st.atkable","title":"<code>atkable(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u653b\u51fb(\u6216\u8fdc\u7a0b\u653b\u51fb)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef atkable(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u653b\u51fb(\u6216\u8fdc\u7a0b\u653b\u51fb)\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    if obj:\n        if obj.body:\n            # __pragma__('js', 'for(var p of obj.body) if (p.type == ATTACK || p.type == RANGED_ATTACK) return true;')\n            pass\n        elif obj.attack:\n            return True\n    return False\n</code></pre>"},{"location":"src/std/#src.std.st.box","title":"<code>box(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureContainer</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef box(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureContainer\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureContainer;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.creep","title":"<code>creep(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Creep</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef creep(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Creep\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof Creep;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.damaged","title":"<code>damaged(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53d7\u635f</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef damaged(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53d7\u635f\n\n    Args:\n        obj:\n\n    Returns:\n\n    \"\"\"\n    # insert if(obj.hits &lt; obj.hitsMax) return true;\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.empty","title":"<code>empty(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u7684store\u662f\u5426\u4e3a\u7a7a(\u7279\u6307RESOURCE_ENERGY)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef empty(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u7684store\u662f\u5426\u4e3a\u7a7a(\u7279\u6307RESOURCE_ENERGY)\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    if not obj or not obj.store:\n        return True\n    return get.energy(obj) == 0\n</code></pre>"},{"location":"src/std/#src.std.st.enemy","title":"<code>enemy(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u654c\u65b9</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef enemy(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u654c\u65b9\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    return obj and not obj.my\n</code></pre>"},{"location":"src/std/#src.std.st.energetic","title":"<code>energetic(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u88ab\u5355\u4f4d\u62ff\u53d6\u5230\u80fd\u91cf</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef energetic(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u88ab\u5355\u4f4d\u62ff\u53d6\u5230\u80fd\u91cf\n\n    Args:\n        obj:\n\n    Returns:\n\n    \"\"\"\n    # insert if(obj instanceof Structure &amp;&amp; obj.store &amp;&amp; get.energy(obj) &gt; 0) return true;\n    # insert if(obj instanceof Creep &amp;&amp; get.energy(obj) &gt; 0) return true;\n    # insert if(obj instanceof Resource &amp;&amp; obj.amount &gt; 0) return true;\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.extension","title":"<code>extension(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureExtension</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef extension(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureExtension\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureExtension;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.flag","title":"<code>flag(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Flag</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef flag(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Flag\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof Flag;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.friend","title":"<code>friend(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u53cb\u65b9</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef friend(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u53cb\u65b9\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    return obj and obj.my\n</code></pre>"},{"location":"src/std/#src.std.st.full","title":"<code>full(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u7684store\u662f\u5426\u6ee1(\u7279\u6307RESOURCE_ENERGY)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef full(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u7684store\u662f\u5426\u6ee1(\u7279\u6307RESOURCE_ENERGY)\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    if not obj or not obj.store:\n        return True\n    return get.energy(obj, True, '=100')\n</code></pre>"},{"location":"src/std/#src.std.st.healable","title":"<code>healable(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u6cbb\u7597\u4ed6\u4eba</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef healable(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u6cbb\u7597\u4ed6\u4eba\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    if obj:\n        if obj.body:\n            # __pragma__('js', 'for(var p of obj.body) if (p.type == HEAL) return true;')\n            pass\n        elif obj.heal:\n            return True\n    return False\n</code></pre>"},{"location":"src/std/#src.std.st.hitable","title":"<code>hitable(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u88ab\u653b\u51fb</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef hitable(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u88ab\u653b\u51fb\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    return obj and obj.hits != undefined\n</code></pre>"},{"location":"src/std/#src.std.st.list","title":"<code>list(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662fpy list</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef list(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662fpy list\n\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    return isinstance(obj, list)\n</code></pre>"},{"location":"src/std/#src.std.st.melee","title":"<code>melee(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u8fd1\u6218\u653b\u51fb</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef melee(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u8fd1\u6218\u653b\u51fb\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # insert if(obj &amp;&amp; obj.body) for(var p of obj.body) if (p.type == ATTACK) return true;\n    return False\n</code></pre>"},{"location":"src/std/#src.std.st.movable","title":"<code>movable(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u79fb\u52a8</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef movable(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u79fb\u52a8\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # insert if(obj &amp;&amp; obj.body) for(var p of obj.body) if (p.type == MOVE) return true;\n    return False\n</code></pre>"},{"location":"src/std/#src.std.st.my","title":"<code>my(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u5df1\u65b9</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef my(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u662f\u5df1\u65b9\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    return obj and obj.my\n</code></pre>"},{"location":"src/std/#src.std.st.number","title":"<code>number(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662fjs Number</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef number(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662fjs Number\n\n\n    Args:\n        obj:\n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', \"return typeof obj === 'number';\")\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.point","title":"<code>point(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5750\u6807\u70b9(\u5177\u6709x\u548cy\u5c5e\u6027)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef point(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5750\u6807\u70b9(\u5177\u6709x\u548cy\u5c5e\u6027)\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    return obj.x != undefined and obj.y != undefined\n</code></pre>"},{"location":"src/std/#src.std.st.rampart","title":"<code>rampart(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureRampart</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef rampart(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureRampart\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureRampart;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.ranged","title":"<code>ranged(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u8fdc\u7a0b\u653b\u51fb</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef ranged(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u8fdc\u7a0b\u653b\u51fb\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    if obj:\n        if obj.body:\n            # __pragma__('js', 'for(var p of obj.body) if (p.type == RANGED_ATTACK) return true;')\n            pass\n        elif obj.attack:\n            return True\n    return False\n</code></pre>"},{"location":"src/std/#src.std.st.resource","title":"<code>resource(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Resource</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef resource(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Resource\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof Resource;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.road","title":"<code>road(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureRoad</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef road(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureRoad\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureRoad;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.site","title":"<code>site(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:ConstructionSite</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef site(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:ConstructionSite\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof ConstructionSite;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.source","title":"<code>source(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Source</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef source(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Source\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof Source;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.spawn","title":"<code>spawn(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Spawn</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef spawn(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Spawn\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureSpawn;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.storable","title":"<code>storable(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u50a8\u5b58\u8d44\u6e90(\u548c\u73b0\u6709\u8d44\u6e90\u60c5\u51b5\u65e0\u5173)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef storable(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u50a8\u5b58\u8d44\u6e90(\u548c\u73b0\u6709\u8d44\u6e90\u60c5\u51b5\u65e0\u5173)\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # insert if(obj instanceof Structure &amp;&amp; obj.store) return true;\n    # insert if(obj instanceof Creep &amp;&amp; obj.body) for(var p of obj.body) if (p.type == CARRY) return true;\n    return False\n</code></pre>"},{"location":"src/std/#src.std.st.structure","title":"<code>structure(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Structure</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef structure(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:Structure\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof Structure;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.tower","title":"<code>tower(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureTower</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef tower(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureTower\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureTower;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.wall","title":"<code>wall(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureWall</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef wall(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f \u6e38\u620f\u5bf9\u8c61:StructureWall\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', 'return obj instanceof StructureWall;')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.st.workable","title":"<code>workable(obj)</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> required Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef workable(obj: object) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2agame object\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c\n\n    Args:\n        obj: \n\n    Returns:\n\n    \"\"\"\n    # insert if(obj &amp;&amp; obj.body) for(var p of obj.body) if (p.type == WORK) return true;\n    return False\n</code></pre>"},{"location":"src/std/#src.std.std","title":"<code>std</code>","text":"<p>\u6807\u51c6\u5e93\u57fa\u7840\u51fd\u6570</p> Source code in <code>src\\std.py</code> Python<pre><code>class std:\n    \"\"\"\n    \u6807\u51c6\u5e93\u57fa\u7840\u51fd\u6570\n    \"\"\"\n    OBJECT_PREVIEW_LENGTH = 20\n\n    @staticmethod\n    def _caller_() -&gt; str:\n        \"\"\"\n        \u83b7\u53d6\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684caller\n\n        *\u4e0d\u4f1a\u8003\u8651 lambda\u4e4b\u7c7b\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u6700\u8fd1\u7684\u4e00\u4e2a\u5b9e\u540d\u51fd\u6570\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f\n\n        ! \u4e0d\u5927\u53ef\u80fd\u7531\u7528\u6237\u6765\u76f4\u63a5\u8c03\u7528\n\n        Returns:\n            \u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u4fe1\u606f\n        \"\"\"\n        # __pragma__(\"js\", \"var stack = new Error().stack;\")\n        # __pragma__(\"js\", 'var cline, cname;')\n        # __pragma__(\"js\", 'var size = stack.length;')\n        i = 3  # 0\u662f\u672c\u51fd\u6570\uff0c1\u662f\u8c03\u7528\u672c\u51fd\u6570\u7684\u51fd\u6570\uff0c2\u662f\u8c03\u7528\u8c03\u7528\u672c\u51fd\u6570\u7684\u51fd\u6570\n        while i &lt; size:\n            # __pragma__(\"js\", r'cline = stack.split(\"\\n\")[i];')\n            # __pragma__(\"js\", r'cname = cline.match(/at\\s+(.*)\\s+\\(/)[1];')\n            # __pragma__(\"js\", r'if (cname.indexOf(\"&lt;anonymous&gt;\") == -1) break;')\n            i += 1\n        # __pragma__(\"js\", 'return cline;')\n\n    @staticmethod\n    def param_assert(params: list[object], names: list[str], shoulds: list[callable], errs: list[str], __raise: bool = True):\n        \"\"\"\n        \u6253\u5370invalid\u53c2\u6570\u9519\u8bef\u4fe1\u606f\n\n        Args:\n            params: \u53c2\u6570\u5217\u8868 list of object\n            names: \u53c2\u6570\u540d\u5217\u8868 list of string\n            shoulds: \u671f\u671b\u7684\u53c2\u6570\u68c0\u67e5\u5217\u8868 list of function\n            errs: \u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\u5217\u8868 list of string\n            __raise: \u662f\u5426\u629b\u51fa\u5f02\u5e38(\u9ed8\u8ba4True)\n\n        Returns:\n\n        \"\"\"\n        length = min(len(params), len(shoulds), len(errs))  # \u4fdd\u8bc1\u957f\u5ea6\u4e00\u81f4\n        errored_params, errored_names, errored_errs, err_flag = [], [], [], False  # \u9519\u8bef\u53c2\u6570\u5217\u8868\n        for i in range(length):\n            if not shoulds[i](params[i]):\n                errored_params.append(params[i])\n                errored_names.append(names[i])\n                errored_errs.append(errs[i])\n                err_flag = True\n        if err_flag:  # \u5982\u679c\u6709\u9519\u8bef\n            caller_info = std._caller_()\n            error_params = []\n\n            txt = \"[PyScreeps-Arena Error Params]:\" + caller_info\n            length = len(errored_names)\n            for i in range(length):\n                error_params.append(errored_params[i])\n                txt += \"\\n\\terror '\" + errored_names[i] + \"': '\" + errored_errs[\n                    i] + \"'  // preview: see at the above.\"\n            txt += '\\n ----------------------------------------------- \\n'\n\n            if not __raise:\n                # __pragma__('js', '{}', 'console.log(txt)')\n                return False\n            txt = txt + \"\\nTick Aborted by Param Error.\\n\\n[Stack Info]:\"\n            print(\"Error Params:\")\n            for i, each in enumerate(error_params):\n                jprint(i, each)\n            # __pragma__('js', '{}', 'throw new Error(txt);')\n\n        return True\n\n    @staticmethod\n    def _expand_composite_as_list(filter_composite: tuple | list | set | callable):\n        \"\"\"\n        \u5c55\u5f00\u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f\u4e3alist\n        :param filter_composite:\n        :return:\n        \"\"\"\n        _ = []\n        if isinstance(filter_composite, (tuple, list)):\n            for each in filter_composite:\n                _.extend(std._expand_composite_as_list(each))\n            return _\n        elif isinstance(filter_composite, set):\n            return std._expand_composite_as_list(next(iter(filter_composite)))\n        else:\n            return [filter_composite]\n\n    @staticmethod\n    def _generate_combo_js_eval(filter_composite: tuple | list | set | callable, fid: dict):\n        \"\"\"\n        \u751f\u6210js\u8868\u8fbe\u4e32\n        :param filter_composite:\n        :param fid:\n        :return:\n        \"\"\"\n        if isinstance(filter_composite, list):\n            return \"(\" + ' || '.join(std._generate_combo_js_eval(each, fid) for each in filter_composite) + \")\"\n        elif isinstance(filter_composite, tuple):\n            return \"(\" + ' &amp;&amp; '.join(std._generate_combo_js_eval(each, fid) for each in filter_composite) + \")\"\n        elif isinstance(filter_composite, set):\n            return ' !(' + std._generate_combo_js_eval(next(iter(filter_composite)), fid) + ')'\n        else:\n            return '%' + fid[filter_composite] + '%'\n\n    _expand_memory = {}\n\n    @staticmethod\n    def combo_filter(filter_composite: tuple | list | set | callable) -&gt; callable:\n        \"\"\"\n        \u5c55\u5f00\u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f\n\n        \u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7531list(\u8868\u793a\u6216)\uff0ctuple(\u8868\u793a\u4e0e), set(\u8868\u793anot)\u7ec4\u6210\u7684\u8868\u8fbe\u5f0f\uff0c\u652f\u6301\u5d4c\u5957\n\n        * \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528combo\u6765\u4ee3\u66ffstd.combo_filter\n\n        Args:\n            filter_composite: \u53ea\u7531tuple\u3001list\u548cset\u7ec4\u6210\u7684\u8fc7\u6ee4\u5668\u7ed3\u6784(\u6700\u5c0f\u5355\u5143\u662fcallable)\n\n        Returns:\n            \u4e00\u4e2a\u65b0\u7684\u53ef\u4ee5\u8868\u8fbe\u8f93\u5165\u8868\u8fbe\u5f0f\u7684\u51fd\u6570\n        \"\"\"\n        memory_key = str(filter_composite)\n        fn = std._expand_memory.py_get(memory_key, None)  # py_get\u662fpython\u7684dict\u7684get\u65b9\u6cd5\n        if fn: return fn\n\n        fn_ids, id_fns = {}, {}  # \u51fd\u6570\u5230id\u7684\u6620\u5c04\uff0cid\u5230\u51fd\u6570\u7684\u6620\u5c04\n        _ = std._expand_composite_as_list(filter_composite)  # \u5c06\u8868\u8fbe\u5f0f\u5c55\u5f00\u4e3alist\n        for f_id, each_fn in enumerate(set(_)):\n            f_id += 1\n            fn_ids[each_fn], id_fns[f_id] = f_id, each_fn\n\n        # \u521b\u5efajs\u8868\u8fbe\u4e32\uff0c\u5176\u4e2d\u5404\u4e2a\u51fd\u6570\u4f7f\u7528%fid%\u8868\u793aS\n        _eval_str = std._generate_combo_js_eval(filter_composite, fn_ids)\n\n        def _inner(obj):\n            eval_str = _eval_str + \"\"  # js string copy\n            for fn_id, func in id_fns.items():\n                # __pragma__('js', \"eval_str = eval_str.replace('%' + fn_id + '%', String(!!func(obj)));\")\n                pass\n\n            return eval(eval_str)\n\n        std._expand_memory[memory_key] = _inner\n        return _inner\n\n    @staticmethod\n    def info(caller_name: str, *args: str):\n        \"\"\"\n        [caller_name Info]: *args\n\n        Args:\n            caller_name: \u8c03\u7528\u8005\u540d\u79f0\n            *args: \u8f93\u51fa\u4fe1\u606f\n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', '{}', 'console.log(\"[\" + caller_name, \"Info]:\", ...args)')\n        pass\n\n    @staticmethod\n    def warn(caller_name: str, *args: str):\n        \"\"\"\n        [caller_name Warn]: *args\n\n        Args:\n            caller_name: \u8c03\u7528\u8005\u540d\u79f0\n            *args: \u8f93\u51fa\u4fe1\u606f\n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', '{}', 'console.log(\"[\" + caller_name, \"Warn]:\", ...args)')\n        pass\n\n    @staticmethod\n    def error(caller_name: str, *args: str):\n        \"\"\"\n        [caller_name Error]: *args\n\n        * \u4f1a\u629b\u51fa\u4e00\u4e2ajs\u7684Error\n\n        Args:\n            caller_name: \u8c03\u7528\u8005\u540d\u79f0\n            *args: \u8f93\u51fa\u4fe1\u606f\n\n        Returns:\n\n        \"\"\"\n        # __pragma__('js', '{}', 'throw new Error(\"[\" + caller_name + \" Error]: \" + args.join(\" \"))')\n        pass\n\n    @staticmethod\n    def show_usage():\n        print(\"cpu time: \", round(get.cpu_time() / 1000), 'us / 50,000us')\n        heap = get.heap()\n        print(\"heap:\", round(heap.used_heap_size / 1024), 'KB /', round(heap.heap_size_limit / 1024), \"KB\")\n</code></pre>"},{"location":"src/std/#src.std.std.combo_filter","title":"<code>combo_filter(filter_composite)</code>  <code>staticmethod</code>","text":"<p>\u5c55\u5f00\u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f</p> <p>\u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7531list(\u8868\u793a\u6216)\uff0ctuple(\u8868\u793a\u4e0e), set(\u8868\u793anot)\u7ec4\u6210\u7684\u8868\u8fbe\u5f0f\uff0c\u652f\u6301\u5d4c\u5957</p> <ul> <li>\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528combo\u6765\u4ee3\u66ffstd.combo_filter</li> </ul> <p>Parameters:</p> Name Type Description Default <code>filter_composite</code> <code>tuple | list | set | callable</code> <p>\u53ea\u7531tuple\u3001list\u548cset\u7ec4\u6210\u7684\u8fc7\u6ee4\u5668\u7ed3\u6784(\u6700\u5c0f\u5355\u5143\u662fcallable)</p> required <p>Returns:</p> Type Description <code>callable</code> <p>\u4e00\u4e2a\u65b0\u7684\u53ef\u4ee5\u8868\u8fbe\u8f93\u5165\u8868\u8fbe\u5f0f\u7684\u51fd\u6570</p> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef combo_filter(filter_composite: tuple | list | set | callable) -&gt; callable:\n    \"\"\"\n    \u5c55\u5f00\u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f\n\n    \u51fd\u6570\u5bb9\u5668\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7531list(\u8868\u793a\u6216)\uff0ctuple(\u8868\u793a\u4e0e), set(\u8868\u793anot)\u7ec4\u6210\u7684\u8868\u8fbe\u5f0f\uff0c\u652f\u6301\u5d4c\u5957\n\n    * \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528combo\u6765\u4ee3\u66ffstd.combo_filter\n\n    Args:\n        filter_composite: \u53ea\u7531tuple\u3001list\u548cset\u7ec4\u6210\u7684\u8fc7\u6ee4\u5668\u7ed3\u6784(\u6700\u5c0f\u5355\u5143\u662fcallable)\n\n    Returns:\n        \u4e00\u4e2a\u65b0\u7684\u53ef\u4ee5\u8868\u8fbe\u8f93\u5165\u8868\u8fbe\u5f0f\u7684\u51fd\u6570\n    \"\"\"\n    memory_key = str(filter_composite)\n    fn = std._expand_memory.py_get(memory_key, None)  # py_get\u662fpython\u7684dict\u7684get\u65b9\u6cd5\n    if fn: return fn\n\n    fn_ids, id_fns = {}, {}  # \u51fd\u6570\u5230id\u7684\u6620\u5c04\uff0cid\u5230\u51fd\u6570\u7684\u6620\u5c04\n    _ = std._expand_composite_as_list(filter_composite)  # \u5c06\u8868\u8fbe\u5f0f\u5c55\u5f00\u4e3alist\n    for f_id, each_fn in enumerate(set(_)):\n        f_id += 1\n        fn_ids[each_fn], id_fns[f_id] = f_id, each_fn\n\n    # \u521b\u5efajs\u8868\u8fbe\u4e32\uff0c\u5176\u4e2d\u5404\u4e2a\u51fd\u6570\u4f7f\u7528%fid%\u8868\u793aS\n    _eval_str = std._generate_combo_js_eval(filter_composite, fn_ids)\n\n    def _inner(obj):\n        eval_str = _eval_str + \"\"  # js string copy\n        for fn_id, func in id_fns.items():\n            # __pragma__('js', \"eval_str = eval_str.replace('%' + fn_id + '%', String(!!func(obj)));\")\n            pass\n\n        return eval(eval_str)\n\n    std._expand_memory[memory_key] = _inner\n    return _inner\n</code></pre>"},{"location":"src/std/#src.std.std.error","title":"<code>error(caller_name, *args)</code>  <code>staticmethod</code>","text":"<ul> <li>\u4f1a\u629b\u51fa\u4e00\u4e2ajs\u7684Error</li> </ul> <p>Parameters:</p> Name Type Description Default <code>caller_name</code> <code>str</code> <p>\u8c03\u7528\u8005\u540d\u79f0</p> required <code>*args</code> <code>str</code> <p>\u8f93\u51fa\u4fe1\u606f</p> <code>()</code> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef error(caller_name: str, *args: str):\n    \"\"\"\n    [caller_name Error]: *args\n\n    * \u4f1a\u629b\u51fa\u4e00\u4e2ajs\u7684Error\n\n    Args:\n        caller_name: \u8c03\u7528\u8005\u540d\u79f0\n        *args: \u8f93\u51fa\u4fe1\u606f\n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', '{}', 'throw new Error(\"[\" + caller_name + \" Error]: \" + args.join(\" \"))')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.std.info","title":"<code>info(caller_name, *args)</code>  <code>staticmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>caller_name</code> <code>str</code> <p>\u8c03\u7528\u8005\u540d\u79f0</p> required <code>*args</code> <code>str</code> <p>\u8f93\u51fa\u4fe1\u606f</p> <code>()</code> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef info(caller_name: str, *args: str):\n    \"\"\"\n    [caller_name Info]: *args\n\n    Args:\n        caller_name: \u8c03\u7528\u8005\u540d\u79f0\n        *args: \u8f93\u51fa\u4fe1\u606f\n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', '{}', 'console.log(\"[\" + caller_name, \"Info]:\", ...args)')\n    pass\n</code></pre>"},{"location":"src/std/#src.std.std.param_assert","title":"<code>param_assert(params, names, shoulds, errs, __raise=True)</code>  <code>staticmethod</code>","text":"<p>\u6253\u5370invalid\u53c2\u6570\u9519\u8bef\u4fe1\u606f</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>list[object]</code> <p>\u53c2\u6570\u5217\u8868 list of object</p> required <code>names</code> <code>list[str]</code> <p>\u53c2\u6570\u540d\u5217\u8868 list of string</p> required <code>shoulds</code> <code>list[callable]</code> <p>\u671f\u671b\u7684\u53c2\u6570\u68c0\u67e5\u5217\u8868 list of function</p> required <code>errs</code> <code>list[str]</code> <p>\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\u5217\u8868 list of string</p> required <code>__raise</code> <code>bool</code> <p>\u662f\u5426\u629b\u51fa\u5f02\u5e38(\u9ed8\u8ba4True)</p> <code>True</code> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef param_assert(params: list[object], names: list[str], shoulds: list[callable], errs: list[str], __raise: bool = True):\n    \"\"\"\n    \u6253\u5370invalid\u53c2\u6570\u9519\u8bef\u4fe1\u606f\n\n    Args:\n        params: \u53c2\u6570\u5217\u8868 list of object\n        names: \u53c2\u6570\u540d\u5217\u8868 list of string\n        shoulds: \u671f\u671b\u7684\u53c2\u6570\u68c0\u67e5\u5217\u8868 list of function\n        errs: \u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\u5217\u8868 list of string\n        __raise: \u662f\u5426\u629b\u51fa\u5f02\u5e38(\u9ed8\u8ba4True)\n\n    Returns:\n\n    \"\"\"\n    length = min(len(params), len(shoulds), len(errs))  # \u4fdd\u8bc1\u957f\u5ea6\u4e00\u81f4\n    errored_params, errored_names, errored_errs, err_flag = [], [], [], False  # \u9519\u8bef\u53c2\u6570\u5217\u8868\n    for i in range(length):\n        if not shoulds[i](params[i]):\n            errored_params.append(params[i])\n            errored_names.append(names[i])\n            errored_errs.append(errs[i])\n            err_flag = True\n    if err_flag:  # \u5982\u679c\u6709\u9519\u8bef\n        caller_info = std._caller_()\n        error_params = []\n\n        txt = \"[PyScreeps-Arena Error Params]:\" + caller_info\n        length = len(errored_names)\n        for i in range(length):\n            error_params.append(errored_params[i])\n            txt += \"\\n\\terror '\" + errored_names[i] + \"': '\" + errored_errs[\n                i] + \"'  // preview: see at the above.\"\n        txt += '\\n ----------------------------------------------- \\n'\n\n        if not __raise:\n            # __pragma__('js', '{}', 'console.log(txt)')\n            return False\n        txt = txt + \"\\nTick Aborted by Param Error.\\n\\n[Stack Info]:\"\n        print(\"Error Params:\")\n        for i, each in enumerate(error_params):\n            jprint(i, each)\n        # __pragma__('js', '{}', 'throw new Error(txt);')\n\n    return True\n</code></pre>"},{"location":"src/std/#src.std.std.warn","title":"<code>warn(caller_name, *args)</code>  <code>staticmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>caller_name</code> <code>str</code> <p>\u8c03\u7528\u8005\u540d\u79f0</p> required <code>*args</code> <code>str</code> <p>\u8f93\u51fa\u4fe1\u606f</p> <code>()</code> Source code in <code>src\\std.py</code> Python<pre><code>@staticmethod\ndef warn(caller_name: str, *args: str):\n    \"\"\"\n    [caller_name Warn]: *args\n\n    Args:\n        caller_name: \u8c03\u7528\u8005\u540d\u79f0\n        *args: \u8f93\u51fa\u4fe1\u606f\n\n    Returns:\n\n    \"\"\"\n    # __pragma__('js', '{}', 'console.log(\"[\" + caller_name, \"Warn]:\", ...args)')\n    pass\n</code></pre>"}]}